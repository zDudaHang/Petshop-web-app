type Query {

    customers: [Customer]
    customer(id: Int!): Customer
    customersByNameLike(name: String!): [Customer]
    customerPets(id: Int!): [Pet]
    sumDebts: Float!

    pets: [Pet]
    pet(id: Int!): Pet
    petsByNameLike(name: String!): [Pet]

    users: [User]
    auth(username: String!, password: String!): User
    user(id: Int!): User
    vets: [User]

    appointments: [Appointment]
    appointment(id: Int!): Appointment

#    Get appointments of a specific vet on specific date
    dayAppointments(userId: Int!, date: String!): [Appointment]

    allSpecies: [Species]
}

type Mutation {

    #    CUSTOMER
    newCustomer(name: String!, birthDate: String!): Customer!
    updateCustomer(id: Int!, newName: String!): Customer
    deleteCustomer(id: Int!): Boolean

    #    CUSTOMER DEBT
    addDebt(id: Int!, value: String!): Customer
    removeDebt(id: Int!, value: Float!): Customer

    #    PET
    newPet(name: String!, birthDate: String!, ownerId: Int!, speciesId: Int!): Pet
    updatePet(id: Int!, newName: String!): Pet!
    deletePet(id: Int!) : Boolean

    #    USER
    newUser(username: String!, password: String!, isAdmin: Boolean!, isVet: Boolean!, name: String!, salary: Int!): User

    #    APPOINTMENT
    newAppointment(userId: Int!, petId: Int!, date: String!, time: String!): Appointment

}

type Customer {
    id: Int!
    name: String!
    birthDate: String!
    pets: [Pet]
    debt: Float!
}

type Pet {
    id: Int!
    name: String!
    birthDate: String!
    owner: Customer!
    species: Species!
}

type User {
    id: Int!
    username: String!
    password: String!
    isAdmin: Boolean!
    isVet: Boolean!
    name: String!
    salary: Int!
}

type Appointment {
    id: Int!
    user: User!,
    pet: Pet!,
    date: String!,
    time: String!
}

type Species {
    id: Int!,
    name: String!
}
