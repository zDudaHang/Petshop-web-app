{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.abbrev = exports.format = void 0;\n\nvar locale_1 = require(\"./locale\");\n/**\n * Formats a numeric value to its number format representation and current locale, using Intl.NumberFormat.\n *\n * @param value Value to be formatted\n * @param options Number format options\n * @return The formatted value.\n */\n\n\nfunction format(value, options) {\n  return new Intl.NumberFormat(locale_1.getUserLocale(), __assign({\n    style: 'decimal'\n  }, options)).format(value);\n}\n\nexports.format = format;\n/**\n * Abrreviates a number to its compact representation.\n * Example: 1000000 is abbreviated to '1m'\n *\n * @param value Value to be abbreviated.\n * @param options?: Intl.NumberFormatOptions\n * @return The abbreviated value.\n */\n\nfunction abbrev(value, options) {\n  if (!value) {\n    return value;\n  }\n\n  if (value >= 1e12) {\n    return format(value / 1e12, __assign({\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 1\n    }, options)) + 't';\n  }\n\n  if (value >= 1e9) {\n    return format(value / 1e9, __assign({\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 1\n    }, options)) + 'b';\n  }\n\n  if (value >= 1e6) {\n    return format(value / 1e6, __assign({\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 1\n    }, options)) + 'm';\n  }\n\n  if (value >= 1e3) {\n    return format(value / 1e3, __assign({\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 1\n    }, options)) + 'k';\n  }\n\n  return format(value, __assign({\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 1\n  }, options));\n}\n\nexports.abbrev = abbrev;","map":{"version":3,"sources":["../../src/util/number.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAEA;;;;;;;;;AAOA,SAAgB,MAAhB,CAAuB,KAAvB,EAAsC,OAAtC,EAAwE;AACtE,SAAO,IAAI,IAAI,CAAC,YAAT,CAAsB,QAAA,CAAA,aAAA,EAAtB,EAAqC,QAAA,CAAA;AAC1C,IAAA,KAAK,EAAE;AADmC,GAAA,EAEvC,OAFuC,CAArC,EAGJ,MAHI,CAGG,KAHH,CAAP;AAID;;AALD,OAAA,CAAA,MAAA,GAAA,MAAA;AAOA;;;;;;;;;AAQA,SAAgB,MAAhB,CAAuB,KAAvB,EAAsC,OAAtC,EAAwE;AACtE,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,KAAP;AACD;;AAED,MAAI,KAAK,IAAI,IAAb,EAAmB;AACjB,WAAO,MAAM,CAAC,KAAK,GAAG,IAAT,EAAa,QAAA,CAAA;AAAI,MAAA,qBAAqB,EAAE,CAA3B;AAA8B,MAAA,qBAAqB,EAAE;AAArD,KAAA,EAA2D,OAA3D,CAAb,CAAN,GAA2F,GAAlG;AACD;;AAED,MAAI,KAAK,IAAI,GAAb,EAAkB;AAChB,WAAO,MAAM,CAAC,KAAK,GAAG,GAAT,EAAY,QAAA,CAAA;AAAI,MAAA,qBAAqB,EAAE,CAA3B;AAA8B,MAAA,qBAAqB,EAAE;AAArD,KAAA,EAA2D,OAA3D,CAAZ,CAAN,GAA0F,GAAjG;AACD;;AAED,MAAI,KAAK,IAAI,GAAb,EAAkB;AAChB,WAAO,MAAM,CAAC,KAAK,GAAG,GAAT,EAAY,QAAA,CAAA;AAAI,MAAA,qBAAqB,EAAE,CAA3B;AAA8B,MAAA,qBAAqB,EAAE;AAArD,KAAA,EAA2D,OAA3D,CAAZ,CAAN,GAA0F,GAAjG;AACD;;AAED,MAAI,KAAK,IAAI,GAAb,EAAkB;AAChB,WAAO,MAAM,CAAC,KAAK,GAAG,GAAT,EAAY,QAAA,CAAA;AAAI,MAAA,qBAAqB,EAAE,CAA3B;AAA8B,MAAA,qBAAqB,EAAE;AAArD,KAAA,EAA2D,OAA3D,CAAZ,CAAN,GAA0F,GAAjG;AACD;;AAED,SAAO,MAAM,CAAC,KAAD,EAAM,QAAA,CAAA;AAAI,IAAA,qBAAqB,EAAE,CAA3B;AAA8B,IAAA,qBAAqB,EAAE;AAArD,GAAA,EAA2D,OAA3D,CAAN,CAAb;AACD;;AAtBD,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.abbrev = exports.format = void 0;\nvar locale_1 = require(\"./locale\");\n/**\n * Formats a numeric value to its number format representation and current locale, using Intl.NumberFormat.\n *\n * @param value Value to be formatted\n * @param options Number format options\n * @return The formatted value.\n */\nfunction format(value, options) {\n    return new Intl.NumberFormat(locale_1.getUserLocale(), __assign({ style: 'decimal' }, options)).format(value);\n}\nexports.format = format;\n/**\n * Abrreviates a number to its compact representation.\n * Example: 1000000 is abbreviated to '1m'\n *\n * @param value Value to be abbreviated.\n * @param options?: Intl.NumberFormatOptions\n * @return The abbreviated value.\n */\nfunction abbrev(value, options) {\n    if (!value) {\n        return value;\n    }\n    if (value >= 1e12) {\n        return format(value / 1e12, __assign({ minimumFractionDigits: 0, maximumFractionDigits: 1 }, options)) + 't';\n    }\n    if (value >= 1e9) {\n        return format(value / 1e9, __assign({ minimumFractionDigits: 0, maximumFractionDigits: 1 }, options)) + 'b';\n    }\n    if (value >= 1e6) {\n        return format(value / 1e6, __assign({ minimumFractionDigits: 0, maximumFractionDigits: 1 }, options)) + 'm';\n    }\n    if (value >= 1e3) {\n        return format(value / 1e3, __assign({ minimumFractionDigits: 0, maximumFractionDigits: 1 }, options)) + 'k';\n    }\n    return format(value, __assign({ minimumFractionDigits: 0, maximumFractionDigits: 1 }, options));\n}\nexports.abbrev = abbrev;\n//# sourceMappingURL=number.js.map"]},"metadata":{},"sourceType":"script"}