{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setNativeValue = exports.composeHandlers = exports.setRef = exports.composeRefs = void 0;\n/**\n * Compose multiple react refs.\n *\n * @returns A new ref that passes down the Element to all ref arguments.\n */\n\nfunction composeRefs() {\n  var refs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    refs[_i] = arguments[_i];\n  }\n\n  return function (value) {\n    return refs.forEach(function (ref) {\n      return setRef(ref, value);\n    });\n  };\n}\n\nexports.composeRefs = composeRefs;\n/**\n * Changes the value of a ref.\n * The ref can be a function ref or a object ref.\n *\n * @param ref The ref to have its value changed.\n * @param value The new value.\n */\n\nfunction setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    var mutableRef = ref;\n    mutableRef.current = value;\n  }\n}\n\nexports.setRef = setRef;\n/**\n * Compose multiple event handlers.\n *\n * @returns A new function that triggers all handlers passed as parameters, in order.\n */\n\nfunction composeHandlers() {\n  var handlers = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    handlers[_i] = arguments[_i];\n  }\n\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return handlers.forEach(function (handler) {\n      return handler && handler.apply(void 0, args);\n    });\n  };\n}\n\nexports.composeHandlers = composeHandlers;\n/**\n * Invokes the native `value` property setter of an element.\n * From https://github.com/facebook/react/issues/10135#issuecomment-401496776\n *\n * @param element The element to invoke the setter on.\n * @param value The value to be set.\n */\n\nfunction setNativeValue(element, value) {\n  var prototype = Object.getPrototypeOf(element);\n  var _a = (Object.getOwnPropertyDescriptor(prototype, 'value') || {}).set,\n      prototypeValueSetter = _a === void 0 ? null : _a;\n  var _b = (Object.getOwnPropertyDescriptor(element, 'value') || {}).set,\n      valueSetter = _b === void 0 ? null : _b;\n\n  if (prototypeValueSetter && valueSetter !== prototypeValueSetter) {\n    prototypeValueSetter.call(element, value);\n  } else if (valueSetter) {\n    valueSetter.call(element, value);\n  } else {\n    throw new Error('The given element does not have a value setter');\n  }\n}\n\nexports.setNativeValue = setNativeValue;","map":{"version":3,"sources":["../../src/util/react.ts"],"names":[],"mappings":";;;;;;AAEA;;;;;;AAKA,SAAgB,WAAhB,GAA2B;AAAI,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAsB;AAAtB,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC7B,SAAO,UAAC,KAAD,EAAS;AAAK,WAAA,IAAI,CAAC,OAAL,CAAa,UAAA,GAAA,EAAG;AAAI,aAAA,MAAM,CAAC,GAAD,EAAN,KAAM,CAAN;AAApB,KAAA,CAAA;AAAuC,GAA5D;AACD;;AAFD,OAAA,CAAA,WAAA,GAAA,WAAA;AAIA;;;;;;;;AAOA,SAAgB,MAAhB,CAA0B,GAA1B,EAAuC,KAAvC,EAAiD;AAC/C,MAAI,OAAO,GAAP,KAAe,UAAnB,EAA+B;AAC7B,IAAA,GAAG,CAAC,KAAD,CAAH;AACD,GAFD,MAEO,IAAI,GAAJ,EAAS;AACd,QAAM,UAAU,GAAG,GAAnB;AACA,IAAA,UAAU,CAAC,OAAX,GAAqB,KAArB;AACD;AACF;;AAPD,OAAA,CAAA,MAAA,GAAA,MAAA;AASA;;;;;;AAKA,SAAgB,eAAhB,GAA+B;AAAC,MAAA,QAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAA4C;AAA5C,IAAA,QAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC9B,SAAO,YAAA;AAAC,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAAmB,WAAA,QAAQ,CAAC,OAAT,CAAiB,UAAA,OAAA,EAAO;AAAI,aAAA,OAAO,IAAI,OAAO,CAAA,KAAP,CAAO,KAAA,CAAP,EAAX,IAAW,CAAX;AAA2B,KAAvD,CAAA;AAAwD,GAAnF;AACD;;AAFD,OAAA,CAAA,eAAA,GAAA,eAAA;AAIA;;;;;;;;AAOA,SAAgB,cAAhB,CAA+B,OAA/B,EAAqD,KAArD,EAA+D;AAC7D,MAAM,SAAS,GAAG,MAAM,CAAC,cAAP,CAAsB,OAAtB,CAAlB;AACQ,MAAA,EAAA,GAAqC,CAAA,MAAM,CAAC,wBAAP,CAAgC,SAAhC,EAA2C,OAA3C,KAAuD,EAAvD,EAAL,GAAhC;AAAA,MAAK,oBAAoB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,EAAhC;AACA,MAAA,EAAA,GAA4B,CAAA,MAAM,CAAC,wBAAP,CAAgC,OAAhC,EAAyC,OAAzC,KAAqD,EAArD,EAAL,GAAvB;AAAA,MAAK,WAAW,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,EAAvB;;AAER,MAAI,oBAAoB,IAAI,WAAW,KAAK,oBAA5C,EAAkE;AAChE,IAAA,oBAAoB,CAAC,IAArB,CAA0B,OAA1B,EAAmC,KAAnC;AACD,GAFD,MAEO,IAAI,WAAJ,EAAiB;AACtB,IAAA,WAAW,CAAC,IAAZ,CAAiB,OAAjB,EAA0B,KAA1B;AACD,GAFM,MAEA;AACL,UAAM,IAAI,KAAJ,CAAU,gDAAV,CAAN;AACD;AACF;;AAZD,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setNativeValue = exports.composeHandlers = exports.setRef = exports.composeRefs = void 0;\n/**\n * Compose multiple react refs.\n *\n * @returns A new ref that passes down the Element to all ref arguments.\n */\nfunction composeRefs() {\n    var refs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        refs[_i] = arguments[_i];\n    }\n    return function (value) { return refs.forEach(function (ref) { return setRef(ref, value); }); };\n}\nexports.composeRefs = composeRefs;\n/**\n * Changes the value of a ref.\n * The ref can be a function ref or a object ref.\n *\n * @param ref The ref to have its value changed.\n * @param value The new value.\n */\nfunction setRef(ref, value) {\n    if (typeof ref === 'function') {\n        ref(value);\n    }\n    else if (ref) {\n        var mutableRef = ref;\n        mutableRef.current = value;\n    }\n}\nexports.setRef = setRef;\n/**\n * Compose multiple event handlers.\n *\n * @returns A new function that triggers all handlers passed as parameters, in order.\n */\nfunction composeHandlers() {\n    var handlers = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        handlers[_i] = arguments[_i];\n    }\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return handlers.forEach(function (handler) { return handler && handler.apply(void 0, args); });\n    };\n}\nexports.composeHandlers = composeHandlers;\n/**\n * Invokes the native `value` property setter of an element.\n * From https://github.com/facebook/react/issues/10135#issuecomment-401496776\n *\n * @param element The element to invoke the setter on.\n * @param value The value to be set.\n */\nfunction setNativeValue(element, value) {\n    var prototype = Object.getPrototypeOf(element);\n    var _a = (Object.getOwnPropertyDescriptor(prototype, 'value') || {}).set, prototypeValueSetter = _a === void 0 ? null : _a;\n    var _b = (Object.getOwnPropertyDescriptor(element, 'value') || {}).set, valueSetter = _b === void 0 ? null : _b;\n    if (prototypeValueSetter && valueSetter !== prototypeValueSetter) {\n        prototypeValueSetter.call(element, value);\n    }\n    else if (valueSetter) {\n        valueSetter.call(element, value);\n    }\n    else {\n        throw new Error('The given element does not have a value setter');\n    }\n}\nexports.setNativeValue = setNativeValue;\n//# sourceMappingURL=react.js.map"]},"metadata":{},"sourceType":"script"}