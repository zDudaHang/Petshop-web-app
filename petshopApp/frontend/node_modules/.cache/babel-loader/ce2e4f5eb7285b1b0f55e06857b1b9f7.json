{"ast":null,"code":"var _jsxFileName = \"/home/bridge/Petshop-web-app/petshopApp/frontend/src/components/Customer/AddDebtView.tsx\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport { css } from \"@emotion/core\";\nimport { Alert, Button, Cell, Grid, Heading, HFlow, Text, VFlow } from \"bold-ui\";\nimport React from \"react\";\nimport { Field, Form } from \"react-final-form\";\nimport { useParams } from \"react-router-dom\";\nimport { ADD_DEBT } from \"../../graphql/mutations\";\nimport { CUSTOMER } from \"../../graphql/queries\";\nimport { TextFieldAdapter } from \"../Adapters\";\nimport { ErrorView } from \"../ErrorView\";\nexport function AddDebtView() {\n  const {\n    customerId\n  } = useParams();\n  const {\n    loading,\n    data\n  } = useQuery(CUSTOMER, {\n    variables: {\n      id: customerId\n    }\n  });\n  const [addDebt, {\n    data: customer\n  }] = useMutation(ADD_DEBT);\n\n  function handleSubmit({\n    value\n  }) {\n    addDebt({\n      variables: {\n        id: customerId,\n        value: value\n      }\n    });\n  }\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(VFlow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Heading, {\n      style: css`text-align: center`,\n      level: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    }, \"Carregando...\"));\n  }\n\n  if (data === null || data === void 0 ? void 0 : data.customer) {\n    const renderForm = props => {\n      return /*#__PURE__*/React.createElement(VFlow, {\n        vSpacing: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Heading, {\n        level: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }\n      }, \"Adicionando um valor a pagar para \", /*#__PURE__*/React.createElement(Text, {\n        color: \"primary\",\n        component: \"span\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 59\n        }\n      }, data.customer.name)), /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: props.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        wrap: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Cell, {\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Field, {\n        component: TextFieldAdapter,\n        name: \"value\",\n        label: \"Valor a ser adicionado\",\n        placeholder: \"Digite um valor\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(Cell, {\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(HFlow, {\n        justifyContent: \"flex-start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: \"reset\",\n        kind: \"normal\",\n        size: \"small\",\n        onClick: props.form.reset,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 37\n        }\n      }, \"Limpar\"), /*#__PURE__*/React.createElement(Button, {\n        type: \"submit\",\n        kind: \"primary\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 37\n        }\n      }, \"Enviar\"))))));\n    };\n\n    return /*#__PURE__*/React.createElement(VFlow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, (customer === null || customer === void 0 ? void 0 : customer.addDebt) && /*#__PURE__*/React.createElement(Alert, {\n      type: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    }, \"Valor adicionado com sucesso !\"), /*#__PURE__*/React.createElement(HFlow, {\n      style: css`margin: 1rem`,\n      justifyContent: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: handleSubmit,\n      initialValues: {\n        name: data.customer.name\n      },\n      render: renderForm,\n      validate: values => {\n        const errors = {\n          value: undefined\n        };\n\n        if (values.value) {\n          if (isNaN(values.value)) {\n            errors.value = 'Precisa ser um número';\n          }\n\n          if (values.value[0] === '-') {\n            errors.value = 'Precisa ser um número positivo';\n          }\n        }\n\n        return errors;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    })));\n  } else {\n    return /*#__PURE__*/React.createElement(ErrorView, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    });\n  }\n}","map":{"version":3,"sources":["/home/bridge/Petshop-web-app/petshopApp/frontend/src/components/Customer/AddDebtView.tsx"],"names":["useMutation","useQuery","css","Alert","Button","Cell","Grid","Heading","HFlow","Text","VFlow","React","Field","Form","useParams","ADD_DEBT","CUSTOMER","TextFieldAdapter","ErrorView","AddDebtView","customerId","loading","data","variables","id","addDebt","customer","handleSubmit","value","renderForm","props","name","form","reset","values","errors","undefined","isNaN"],"mappings":"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","sourcesContent":["import { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport { css } from \"@emotion/core\";\nimport { Alert, Button, Cell, Grid, Heading, HFlow, Text, VFlow } from \"bold-ui\"\nimport React from \"react\"\nimport { Field, Form, FormRenderProps } from \"react-final-form\";\nimport { useParams } from \"react-router-dom\"\nimport { ADD_DEBT } from \"../../graphql/mutations\";\nimport { CUSTOMER } from \"../../graphql/queries\";\nimport { CustomerAddDebtResult, CustomerResult } from \"../../types/Customer\";\nimport { TextFieldAdapter } from \"../Adapters\";\nimport { ErrorView } from \"../ErrorView\";\n\nexport function AddDebtView() {\n\n    const { customerId } = useParams<{customerId: string}>();\n\n    const { loading, data } = useQuery<CustomerResult>(CUSTOMER, { \n        variables: { id: customerId }\n    });\n\n    const [addDebt, {data:customer}] = useMutation<CustomerAddDebtResult>(ADD_DEBT);\n\n    function handleSubmit({value}: any) {\n        addDebt({variables: {\n            id: customerId,\n            value: value\n        }})\n    }\n\n    if (loading) {\n        return (\n            <VFlow>\n                <Heading style={css`text-align: center`} level={1}>\n                    Carregando...\n                </Heading>\n            </VFlow>\n        );\n    }\n\n    if (data?.customer) {\n        const renderForm = (props: FormRenderProps) => {\n            return (\n                <VFlow vSpacing={1}>\n                    <Heading level={1}>\n                        Adicionando um valor a pagar para <Text color=\"primary\" component=\"span\">{data.customer.name}</Text>\n                    </Heading>\n                    <form onSubmit={props.handleSubmit}>\n                        <Grid wrap>\n                            <Cell xs={12}>\n                                <Field\n                                    component={TextFieldAdapter}\n                                    name=\"value\"\n                                    label=\"Valor a ser adicionado\"\n                                    placeholder=\"Digite um valor\"\n                                    required\n                                />\n                            </Cell>\n                            <Cell xs={12}>\n                                <HFlow justifyContent=\"flex-start\">\n                                    <Button type=\"reset\" kind=\"normal\" size=\"small\" onClick={props.form.reset}>\n                                        Limpar\n                                    </Button>\n                                    <Button type=\"submit\" kind=\"primary\" size=\"small\">\n                                        Enviar\n                                    </Button>\n                                </HFlow>\n                            </Cell>\n                        </Grid>\n                    </form>\n                </VFlow>\n            );\n        }\n\n        return (\n            <VFlow>\n                {customer?.addDebt &&\n                    <Alert type='success'>\n                        Valor adicionado com sucesso !\n                    </Alert>\n                }\n                <HFlow style={css`margin: 1rem`} justifyContent=\"center\">\n                    <Form\n                        onSubmit={handleSubmit}\n                        initialValues={ { name: data.customer.name } }\n                        render={renderForm}\n                        validate={values => {\n                            const errors: {value: String | undefined } = {value: undefined}\n                            if (values.value) {\n                                if (isNaN(values.value)) {\n                                    errors.value = 'Precisa ser um número'\n                                }\n                                if (values.value[0] === '-') {\n                                    errors.value = 'Precisa ser um número positivo'\n                                }\n                            }\n                            return errors\n                        }}\n                    />\n                </HFlow>\n            </VFlow>\n        );\n    } else {\n        return (\n            <ErrorView/>\n    );}\n}"]},"metadata":{},"sourceType":"module"}