{"ast":null,"code":"var _jsxFileName = \"/home/bridge/Petshop-web-app/petshopApp/frontend/src/components/Infos/ErrorWithDelay.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { Field } from \"react-final-form\";\n\nfunction DisplayError({\n  delay,\n  active,\n  dirty,\n  error,\n  touched,\n  children\n}) {\n  const [show, setShow] = useState(false);\n  useEffect(() => {\n    let timeout;\n    console.log(`[DISPLAY ERROR] ${error}`);\n\n    if (active && error && dirty) {\n      console.log('setting timeout');\n      timeout = setTimeout(() => setShow(true), delay);\n    }\n\n    return () => {\n      console.log('clearing timeout');\n      clearTimeout(timeout);\n    };\n  }, [delay, error, active, dirty]);\n  return error && (touched && !active || touched && !show && active || show) ? children(error) : null;\n}\n\nexport function ErrorWithDelay({\n  name,\n  children,\n  delay\n}) {\n  return /*#__PURE__*/React.createElement(Field, {\n    name: name,\n    subscription: {\n      active: true,\n      error: true,\n      dirty: true,\n      touched: true\n    }\n    /*\n        An object of the parts of FieldState to subscribe to. \n        If a subscription is provided, the <Field/> will only rerender when those parts of field state change.\n        If no subscription is provided, it will default to subscribing to all field state changes. \n        i.e. <Field/> will rerender whenever any part of the field state changes.\n    */\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, ({\n    meta: {\n      active,\n      dirty,\n      error,\n      touched\n    }\n  }) => /*#__PURE__*/React.createElement(DisplayError, {\n    delay: delay,\n    active: active,\n    dirty: dirty,\n    error: error,\n    touched: touched,\n    children: children,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }));\n}","map":{"version":3,"sources":["/home/bridge/Petshop-web-app/petshopApp/frontend/src/components/Infos/ErrorWithDelay.tsx"],"names":["React","useEffect","useState","Field","DisplayError","delay","active","dirty","error","touched","children","show","setShow","timeout","console","log","setTimeout","clearTimeout","ErrorWithDelay","name","meta"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,QAAsB,kBAAtB;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,MAAT;AAAiBC,EAAAA,KAAjB;AAAwBC,EAAAA,KAAxB;AAA+BC,EAAAA,OAA/B;AAAwCC,EAAAA;AAAxC,CAAtB,EAA+E;AAC3E,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,KAAD,CAAhC;AACAD,EAAAA,SAAS,CACL,MAAM;AACF,QAAIY,OAAJ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,mBAAkBP,KAAM,EAArC;;AACA,QAAIF,MAAM,IAAIE,KAAV,IAAmBD,KAAvB,EAA8B;AAC1BO,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAF,MAAAA,OAAO,GAAGG,UAAU,CAAC,MAAMJ,OAAO,CAAC,IAAD,CAAd,EAAsBP,KAAtB,CAApB;AACH;;AACD,WAAO,MAAM;AACTS,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAE,MAAAA,YAAY,CAACJ,OAAD,CAAZ;AACH,KAHD;AAIH,GAZI,EAaT,CAACR,KAAD,EAAQG,KAAR,EAAeF,MAAf,EAAuBC,KAAvB,CAbS,CAAT;AAeA,SAAOC,KAAK,KAAMC,OAAO,IAAI,CAACH,MAAb,IAAyBG,OAAO,IAAI,CAACE,IAAZ,IAAoBL,MAA7C,IAAwDK,IAA7D,CAAL,GACDD,QAAQ,CAACF,KAAD,CADP,GAED,IAFN;AAGH;;AAED,OAAO,SAASU,cAAT,CAAwB;AAACC,EAAAA,IAAD;AAAOT,EAAAA,QAAP;AAAiBL,EAAAA;AAAjB,CAAxB,EAAuD;AAC1D,sBACI,oBAAC,KAAD;AACI,IAAA,IAAI,EAAEc,IADV;AAEI,IAAA,YAAY,EAAE;AAACb,MAAAA,MAAM,EAAE,IAAT;AAAeE,MAAAA,KAAK,EAAE,IAAtB;AAA4BD,MAAAA,KAAK,EAAE,IAAnC;AAAyCE,MAAAA,OAAO,EAAE;AAAlD;AACd;;;;;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUK,CAAC;AAACW,IAAAA,IAAI,EAAE;AAACd,MAAAA,MAAD;AAASC,MAAAA,KAAT;AAAgBC,MAAAA,KAAhB;AAAuBC,MAAAA;AAAvB;AAAP,GAAD,kBACG,oBAAC,YAAD;AACI,IAAA,KAAK,EAAEJ,KADX;AAEI,IAAA,MAAM,EAAEC,MAFZ;AAGI,IAAA,KAAK,EAAEC,KAHX;AAII,IAAA,KAAK,EAAEC,KAJX;AAKI,IAAA,OAAO,EAAEC,OALb;AAMI,IAAA,QAAQ,EAAEC,QANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXR,CADJ;AAuBH","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { Field } from \"react-final-form\"\n\nfunction DisplayError({ delay, active, dirty, error, touched, children} : any) {\n    const [show, setShow] = useState(false)\n    useEffect(\n        () => {\n            let timeout: NodeJS.Timeout\n            console.log(`[DISPLAY ERROR] ${error}`)\n            if (active && error && dirty) {\n                console.log('setting timeout')\n                timeout = setTimeout(() => setShow(true), delay)\n            }\n            return () => {\n                console.log('clearing timeout')\n                clearTimeout(timeout)\n            }\n        },\n    [delay, error, active, dirty])\n\n    return error && ((touched && !active) || (touched && !show && active) || show)\n        ? children(error)\n        : null\n}\n\nexport function ErrorWithDelay({name, children, delay} : any) {\n    return(\n        <Field\n            name={name}\n            subscription={{active: true, error: true, dirty: true, touched: true}}\n            /*\n                An object of the parts of FieldState to subscribe to. \n                If a subscription is provided, the <Field/> will only rerender when those parts of field state change.\n                If no subscription is provided, it will default to subscribing to all field state changes. \n                i.e. <Field/> will rerender whenever any part of the field state changes.\n            */\n        >\n            {({meta: {active, dirty, error, touched}}) => (\n                <DisplayError\n                    delay={delay}\n                    active={active}\n                    dirty={dirty}\n                    error={error}\n                    touched={touched}\n                    children={children}\n                />\n            )}\n        </Field>\n    )\n}"]},"metadata":{},"sourceType":"module"}