{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidDate = exports.isSameDay = exports.createMonthMatrix = exports.createWeekArray = exports.getLastDayOfMonth = exports.getFirstDayOfMonth = void 0;\n/**\n * Calculate the first day of a month.\n *\n * @param target Target month.\n * @returns A new date which is the first day of the target month.\n */\n\nexports.getFirstDayOfMonth = function (target) {\n  var firstDayOfMonth = new Date(target);\n  firstDayOfMonth.setDate(1);\n  return firstDayOfMonth;\n};\n/**\n * Calculate the last day of a month.\n * @param target  Target month.\n * @returns A new date which is the last day of the target month.\n */\n\n\nexports.getLastDayOfMonth = function (target) {\n  return new Date(target.getFullYear(), target.getMonth() + 1, 0);\n};\n/**\n * Creates an ordered array of the week containing the target date\n *\n * @param target Target date of the week\n * @returns An array starting by sunday and finished by saturday which includes the target date\n */\n\n\nexports.createWeekArray = function (target) {\n  var week = [];\n\n  for (var i = 0; i < 7; i++) {\n    var d = new Date(target);\n    d.setDate(target.getDate() - target.getDay() + i);\n    week.push(d);\n  }\n\n  return week;\n};\n/**\n * Creates an array of weeks for the target month. Each week is itself an array of dates containing the week's dates.\n *\n * @param target The target month to create.\n * @returns A new array of array of dates containing all month dates.\n */\n\n\nexports.createMonthMatrix = function (target) {\n  var firstDayOfMonth = exports.getFirstDayOfMonth(target);\n  var lastDayOfMonth = exports.getLastDayOfMonth(target);\n  var weeks = [];\n  var curr = firstDayOfMonth;\n\n  while (true) {\n    var week = exports.createWeekArray(curr);\n\n    if (week[0] > lastDayOfMonth && !exports.isSameDay(week[0], lastDayOfMonth)) {\n      break;\n    } else {\n      weeks.push(week);\n      curr = new Date(curr);\n      curr.setDate(curr.getDate() + 7);\n    }\n  }\n\n  return weeks;\n};\n/**\n * Check if two dates belongs to the same day.\n *\n * @param d1 First date\n * @param d2 Second date\n * @returns Whether the dates are the same day, month and year\n */\n\n\nexports.isSameDay = function (d1, d2) {\n  return d1.getDate() === d2.getDate() && d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear();\n};\n/**\n * Check if the parameter is a valid date.\n */\n\n\nexports.isValidDate = function (possibleDate) {\n  // If possibleDate is not a valid date, getTime() will return NaN, and NaN is never equal to itself.\n  // eslint-disable-next-line no-self-compare\n  return possibleDate && possibleDate.getTime() === possibleDate.getTime();\n};","map":{"version":3,"sources":["../../../src/components/Calendar/util.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;AAMa,OAAA,CAAA,kBAAA,GAAqB,UAAC,MAAD,EAAa;AAC7C,MAAM,eAAe,GAAG,IAAI,IAAJ,CAAS,MAAT,CAAxB;AACA,EAAA,eAAe,CAAC,OAAhB,CAAwB,CAAxB;AACA,SAAO,eAAP;AACD,CAJY;AAMb;;;;;;;AAKa,OAAA,CAAA,iBAAA,GAAoB,UAAC,MAAD,EAAa;AAC5C,SAAO,IAAI,IAAJ,CAAS,MAAM,CAAC,WAAP,EAAT,EAA+B,MAAM,CAAC,QAAP,KAAoB,CAAnD,EAAsD,CAAtD,CAAP;AACD,CAFY;AAIb;;;;;;;;AAMa,OAAA,CAAA,eAAA,GAAkB,UAAC,MAAD,EAAa;AAC1C,MAAM,IAAI,GAAW,EAArB;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AAC1B,QAAM,CAAC,GAAG,IAAI,IAAJ,CAAS,MAAT,CAAV;AACA,IAAA,CAAC,CAAC,OAAF,CAAU,MAAM,CAAC,OAAP,KAAmB,MAAM,CAAC,MAAP,EAAnB,GAAqC,CAA/C;AACA,IAAA,IAAI,CAAC,IAAL,CAAU,CAAV;AACD;;AAED,SAAO,IAAP;AACD,CAVY;AAYb;;;;;;;;AAMa,OAAA,CAAA,iBAAA,GAAoB,UAAC,MAAD,EAAa;AAC5C,MAAM,eAAe,GAAG,OAAA,CAAA,kBAAA,CAAmB,MAAnB,CAAxB;AACA,MAAM,cAAc,GAAG,OAAA,CAAA,iBAAA,CAAkB,MAAlB,CAAvB;AACA,MAAM,KAAK,GAAG,EAAd;AAEA,MAAI,IAAI,GAAG,eAAX;;AAEA,SAAO,IAAP,EAAa;AACX,QAAM,IAAI,GAAG,OAAA,CAAA,eAAA,CAAgB,IAAhB,CAAb;;AACA,QAAI,IAAI,CAAC,CAAD,CAAJ,GAAU,cAAV,IAA4B,CAAC,OAAA,CAAA,SAAA,CAAU,IAAI,CAAC,CAAD,CAAd,EAAmB,cAAnB,CAAjC,EAAqE;AACnE;AACD,KAFD,MAEO;AACL,MAAA,KAAK,CAAC,IAAN,CAAW,IAAX;AACA,MAAA,IAAI,GAAG,IAAI,IAAJ,CAAS,IAAT,CAAP;AACA,MAAA,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,OAAL,KAAiB,CAA9B;AACD;AACF;;AAED,SAAO,KAAP;AACD,CAnBY;AAqBb;;;;;;;;;AAOa,OAAA,CAAA,SAAA,GAAY,UAAC,EAAD,EAAW,EAAX,EAAmB;AAC1C,SAAO,EAAE,CAAC,OAAH,OAAiB,EAAE,CAAC,OAAH,EAAjB,IAAiC,EAAE,CAAC,QAAH,OAAkB,EAAE,CAAC,QAAH,EAAnD,IAAoE,EAAE,CAAC,WAAH,OAAqB,EAAE,CAAC,WAAH,EAAhG;AACD,CAFY;AAIb;;;;;AAGa,OAAA,CAAA,WAAA,GAAc,UAAC,YAAD,EAAkB;AAC3C;AACA;AACA,SAAO,YAAY,IAAI,YAAY,CAAC,OAAb,OAA2B,YAAY,CAAC,OAAb,EAAlD;AACD,CAJY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isValidDate = exports.isSameDay = exports.createMonthMatrix = exports.createWeekArray = exports.getLastDayOfMonth = exports.getFirstDayOfMonth = void 0;\n/**\n * Calculate the first day of a month.\n *\n * @param target Target month.\n * @returns A new date which is the first day of the target month.\n */\nexports.getFirstDayOfMonth = function (target) {\n    var firstDayOfMonth = new Date(target);\n    firstDayOfMonth.setDate(1);\n    return firstDayOfMonth;\n};\n/**\n * Calculate the last day of a month.\n * @param target  Target month.\n * @returns A new date which is the last day of the target month.\n */\nexports.getLastDayOfMonth = function (target) {\n    return new Date(target.getFullYear(), target.getMonth() + 1, 0);\n};\n/**\n * Creates an ordered array of the week containing the target date\n *\n * @param target Target date of the week\n * @returns An array starting by sunday and finished by saturday which includes the target date\n */\nexports.createWeekArray = function (target) {\n    var week = [];\n    for (var i = 0; i < 7; i++) {\n        var d = new Date(target);\n        d.setDate(target.getDate() - target.getDay() + i);\n        week.push(d);\n    }\n    return week;\n};\n/**\n * Creates an array of weeks for the target month. Each week is itself an array of dates containing the week's dates.\n *\n * @param target The target month to create.\n * @returns A new array of array of dates containing all month dates.\n */\nexports.createMonthMatrix = function (target) {\n    var firstDayOfMonth = exports.getFirstDayOfMonth(target);\n    var lastDayOfMonth = exports.getLastDayOfMonth(target);\n    var weeks = [];\n    var curr = firstDayOfMonth;\n    while (true) {\n        var week = exports.createWeekArray(curr);\n        if (week[0] > lastDayOfMonth && !exports.isSameDay(week[0], lastDayOfMonth)) {\n            break;\n        }\n        else {\n            weeks.push(week);\n            curr = new Date(curr);\n            curr.setDate(curr.getDate() + 7);\n        }\n    }\n    return weeks;\n};\n/**\n * Check if two dates belongs to the same day.\n *\n * @param d1 First date\n * @param d2 Second date\n * @returns Whether the dates are the same day, month and year\n */\nexports.isSameDay = function (d1, d2) {\n    return d1.getDate() === d2.getDate() && d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear();\n};\n/**\n * Check if the parameter is a valid date.\n */\nexports.isValidDate = function (possibleDate) {\n    // If possibleDate is not a valid date, getTime() will return NaN, and NaN is never equal to itself.\n    // eslint-disable-next-line no-self-compare\n    return possibleDate && possibleDate.getTime() === possibleDate.getTime();\n};\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"script"}