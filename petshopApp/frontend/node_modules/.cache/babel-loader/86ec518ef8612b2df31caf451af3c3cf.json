{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.invertColorScale = exports.hexToRGB = void 0;\n\nexports.hexToRGB = function (hex, alpha) {\n  var r = parseInt(hex.slice(1, 3), 16);\n  var g = parseInt(hex.slice(3, 5), 16);\n  var b = parseInt(hex.slice(5, 7), 16);\n\n  if (alpha) {\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n  } else {\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \")\";\n  }\n};\n\nexports.invertColorScale = function (scale) {\n  return {\n    c10: scale.c100,\n    c20: scale.c90,\n    c30: scale.c80,\n    c40: scale.c70,\n    c50: scale.c60,\n    c60: scale.c50,\n    c70: scale.c40,\n    c80: scale.c30,\n    c90: scale.c20,\n    c100: scale.c10\n  };\n};","map":{"version":3,"sources":["../../src/styles/utils.ts"],"names":[],"mappings":";;;;;;;AAEa,OAAA,CAAA,QAAA,GAAW,UAAC,GAAD,EAAM,KAAN,EAAW;AACjC,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,EAAkB,EAAlB,CAAlB;AACA,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,EAAkB,EAAlB,CAAlB;AACA,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,EAAkB,EAAlB,CAAlB;;AAEA,MAAI,KAAJ,EAAW;AACT,WAAO,UAAQ,CAAR,GAAS,IAAT,GAAc,CAAd,GAAe,IAAf,GAAoB,CAApB,GAAqB,IAArB,GAA0B,KAA1B,GAA+B,GAAtC;AACD,GAFD,MAEO;AACL,WAAO,UAAQ,CAAR,GAAS,IAAT,GAAc,CAAd,GAAe,IAAf,GAAoB,CAApB,GAAqB,GAA5B;AACD;AACF,CAVY;;AAYA,OAAA,CAAA,gBAAA,GAAmB,UAAC,KAAD,EAAkB;AAChD,SAAO;AACL,IAAA,GAAG,EAAE,KAAK,CAAC,IADN;AAEL,IAAA,GAAG,EAAE,KAAK,CAAC,GAFN;AAGL,IAAA,GAAG,EAAE,KAAK,CAAC,GAHN;AAIL,IAAA,GAAG,EAAE,KAAK,CAAC,GAJN;AAKL,IAAA,GAAG,EAAE,KAAK,CAAC,GALN;AAML,IAAA,GAAG,EAAE,KAAK,CAAC,GANN;AAOL,IAAA,GAAG,EAAE,KAAK,CAAC,GAPN;AAQL,IAAA,GAAG,EAAE,KAAK,CAAC,GARN;AASL,IAAA,GAAG,EAAE,KAAK,CAAC,GATN;AAUL,IAAA,IAAI,EAAE,KAAK,CAAC;AAVP,GAAP;AAYD,CAbY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.invertColorScale = exports.hexToRGB = void 0;\nexports.hexToRGB = function (hex, alpha) {\n    var r = parseInt(hex.slice(1, 3), 16);\n    var g = parseInt(hex.slice(3, 5), 16);\n    var b = parseInt(hex.slice(5, 7), 16);\n    if (alpha) {\n        return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n    }\n    else {\n        return \"rgba(\" + r + \", \" + g + \", \" + b + \")\";\n    }\n};\nexports.invertColorScale = function (scale) {\n    return {\n        c10: scale.c100,\n        c20: scale.c90,\n        c30: scale.c80,\n        c40: scale.c70,\n        c50: scale.c60,\n        c60: scale.c50,\n        c70: scale.c40,\n        c80: scale.c30,\n        c90: scale.c20,\n        c100: scale.c10,\n    };\n};\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}