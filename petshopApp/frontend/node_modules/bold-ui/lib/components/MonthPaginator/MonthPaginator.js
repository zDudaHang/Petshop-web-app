"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonthPaginator = void 0;
var emotion_1 = require("emotion");
var react_1 = __importStar(require("react"));
var react_popper_1 = require("react-popper");
var i18n_1 = require("../../i18n");
var styles_1 = require("../../styles");
var locale_1 = require("../../util/locale");
var Button_1 = require("../Button");
var Icon_1 = require("../Icon");
var HFlow_1 = require("../HFlow");
var MonthPicker_1 = require("../MonthPicker/MonthPicker");
var Text_1 = require("../Text");
var Tooltip_1 = require("../Tooltip");
function MonthPaginator(props) {
    var month = props.month, year = props.year, isOpen = props.isOpen, ghost = props.ghost, popperPlacement = props.popperPlacement, formatter = props.formatter, onChange = props.onChange;
    var locale = i18n_1.useLocale();
    var _a = react_1.useState(isOpen), open = _a[0], setOpen = _a[1];
    var importedClasses = styles_1.useStyles(MonthPicker_1.createStyles).classes;
    var _b = styles_1.useStyles(createStyles, open).classes, container = _b.container, ghostContainer = _b.ghostContainer, popup = _b.popup, popupItem = _b.popupItem, showMonth = _b.showMonth;
    var _c = react_1.useState(month), visibleMonth = _c[0], setVisibleMonth = _c[1];
    react_1.useEffect(function () {
        setVisibleMonth(month);
    }, [month]);
    var _d = react_1.useState(year), visibleYear = _d[0], setVisibleYear = _d[1];
    react_1.useEffect(function () {
        setVisibleYear(year);
    }, [year]);
    var _e = react_1.useState(), anchorRef = _e[0], setAnchorRef = _e[1];
    var _f = react_1.useState(), popperRef = _f[0], setPopperRef = _f[1];
    var _g = react_popper_1.usePopper(anchorRef, popperRef, { placement: popperPlacement }), popperStyle = _g.styles.popper, placement = _g.attributes.placement;
    var updateStates = function (newMonth, newYear) {
        setVisibleMonth(newMonth);
        setVisibleYear(newYear);
        onChange && onChange({ month: newMonth, year: newYear });
    };
    var onPrevClick = function () {
        if (open)
            setVisibleYear(function (currYear) { return currYear - 1; });
        else {
            var newMonth = visibleMonth === 0 ? 11 : visibleMonth - 1;
            var newYear = visibleMonth === 0 ? visibleYear - 1 : visibleYear;
            updateStates(newMonth, newYear);
        }
    };
    var onNextClick = function () {
        if (open)
            setVisibleYear(function (currYear) { return currYear + 1; });
        else {
            var newMonth = visibleMonth === 11 ? 0 : visibleMonth + 1;
            var newYear = visibleMonth === 11 ? visibleYear + 1 : visibleYear;
            updateStates(newMonth, newYear);
        }
    };
    var onMonthClick = function (month) { return function () {
        updateStates(month, visibleYear);
        setOpen(!open);
    }; };
    var baseYearDate = new Date(visibleYear, visibleMonth, 1, 0, 0, 0, 0);
    var yearFormatter = new Intl.DateTimeFormat(locale_1.getUserLocale(), { year: 'numeric' });
    var monthFormatter = locale_1.getMonthShortFormat(baseYearDate, formatter);
    var monthNames = locale_1.getMonthNames(locale_1.getUserLocale(), formatter);
    return (react_1.default.createElement("div", { className: ghost ? ghostContainer : container, ref: setAnchorRef },
        react_1.default.createElement(HFlow_1.HFlow, { alignItems: 'center' },
            react_1.default.createElement(Tooltip_1.Tooltip, { text: open ? locale.calendar.previousYear : locale.calendar.previousMonth },
                react_1.default.createElement(Button_1.Button, { size: 'small', skin: 'ghost', onClick: onPrevClick, "data-testid": 'MonthPaginator.PrevButton' },
                    react_1.default.createElement(Icon_1.Icon, { icon: 'angleLeft' }))),
            react_1.default.createElement(Tooltip_1.Tooltip, { text: open ? locale.monthPaginator.close : locale.monthPaginator.show },
                react_1.default.createElement(Button_1.Button, { size: 'small', skin: 'ghost', onClick: function () { return setOpen(!open); }, style: showMonth, "data-testid": 'MonthPaginator.ShowMonthsButton' },
                    react_1.default.createElement(Text_1.Text, { fontWeight: 'bold', fontSize: 0.875 },
                        !open && monthFormatter + " - ",
                        yearFormatter.format(baseYearDate)))),
            react_1.default.createElement(Tooltip_1.Tooltip, { text: open ? locale.calendar.nextYear : locale.calendar.nextMonth },
                react_1.default.createElement(Button_1.Button, { size: 'small', skin: 'ghost', onClick: onNextClick, "data-testid": 'MonthPaginator.NextButton' },
                    react_1.default.createElement(Icon_1.Icon, { icon: 'angleRight' })))),
        open && (react_1.default.createElement("div", { ref: setPopperRef, className: emotion_1.css(popperStyle, popup), "data-placement": placement }, monthNames.map(function (month, index) { return (react_1.default.createElement("div", { key: index, className: popupItem },
            react_1.default.createElement(Button_1.Button, { title: month.long, onClick: onMonthClick(index), skin: 'ghost', style: emotion_1.css(importedClasses.button, index === visibleMonth && importedClasses.active) }, month.short))); })))));
}
exports.MonthPaginator = MonthPaginator;
MonthPaginator.defaultProps = {
    isOpen: false,
    popperPlacement: 'bottom-start',
    month: new Date().getMonth(),
    year: new Date().getFullYear(),
};
var createStyles = function (theme, open) { return ({
    container: {
        display: 'inline-block',
        padding: open ? '1rem' : '1rem 0.5rem',
        backgroundColor: theme.pallete.surface.main,
        border: "1px solid " + theme.pallete.divider,
        boxShadow: theme.shadows.outer['20'],
        borderRadius: theme.radius.popper,
    },
    ghostContainer: {
        padding: '-2rem',
    },
    popup: {
        display: 'grid',
        alignItems: 'center',
        gridTemplateColumns: 'repeat(3, 1fr)',
        margin: '0.25rem',
        zIndex: theme.zIndex.popper,
        backgroundColor: theme.pallete.surface.main,
        borderTop: 0,
        border: "1px solid " + theme.pallete.divider,
        boxShadow: theme.shadows.outer['20'],
        borderRadius: theme.radius.popper,
    },
    popupItem: {
        textAlign: 'center',
        margin: '0.25rem',
    },
    showMonth: {
        margin: open ? 'auto' : 'auto -1rem',
    },
}); };
//# sourceMappingURL=MonthPaginator.js.map