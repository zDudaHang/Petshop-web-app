"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RootRef = void 0;
var react_1 = __importDefault(require("react"));
var react_dom_1 = require("react-dom");
var react_2 = require("../../util/react");
/**
 * Helper component to allow attaching a ref to a
 * wrapped element to access the underlying DOM element.
 *
 * From Material's UI RootRef component
 */
var RootRef = /** @class */ (function (_super) {
    __extends(RootRef, _super);
    function RootRef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RootRef.prototype.componentDidMount = function () {
        this.ref = react_dom_1.findDOMNode(this);
        react_2.setRef(this.props.rootRef, this.ref);
    };
    RootRef.prototype.componentDidUpdate = function (prevProps) {
        var ref = react_dom_1.findDOMNode(this);
        if (prevProps.rootRef !== this.props.rootRef || this.ref !== ref) {
            if (prevProps.rootRef !== this.props.rootRef) {
                react_2.setRef(prevProps.rootRef, null);
            }
            this.ref = ref;
            react_2.setRef(this.props.rootRef, this.ref);
        }
    };
    RootRef.prototype.componentWillUnmount = function () {
        this.ref = null;
        react_2.setRef(this.props.rootRef, null);
    };
    RootRef.prototype.render = function () {
        return this.props.children;
    };
    return RootRef;
}(react_1.default.Component));
exports.RootRef = RootRef;
//# sourceMappingURL=RootRef.js.map