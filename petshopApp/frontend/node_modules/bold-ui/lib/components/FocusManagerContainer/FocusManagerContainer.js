"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FocusManagerContainer = void 0;
var react_1 = __importDefault(require("react"));
/**
 * Fires events when focus enters or leaves the container.
 */
var FocusManagerContainer = /** @class */ (function (_super) {
    __extends(FocusManagerContainer, _super);
    function FocusManagerContainer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isManagingFocus: false,
        };
        _this.handleBlur = function (e) {
            _this.timeoutId = setTimeout(function () {
                if (_this.state.isManagingFocus) {
                    _this.setState({ isManagingFocus: false }, function () {
                        if (_this.props.onFocusOut) {
                            _this.props.onFocusOut(e);
                        }
                    });
                }
            }, 0);
        };
        _this.handleFocus = function (e) {
            clearTimeout(_this.timeoutId);
            if (!_this.state.isManagingFocus) {
                _this.setState({ isManagingFocus: true }, function () {
                    if (_this.props.onFocusIn) {
                        _this.props.onFocusIn(e);
                    }
                });
            }
        };
        return _this;
    }
    FocusManagerContainer.prototype.render = function () {
        return (react_1.default.createElement("div", { onBlur: this.handleBlur, onFocus: this.handleFocus }, this.props.children));
    };
    return FocusManagerContainer;
}(react_1.default.Component));
exports.FocusManagerContainer = FocusManagerContainer;
//# sourceMappingURL=FocusManagerContainer.js.map