"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStyles = exports.Paginator = void 0;
var react_1 = __importStar(require("react"));
var i18n_1 = require("../../i18n");
var styles_1 = require("../../styles");
var Button_1 = require("../Button");
var Icon_1 = require("../Icon");
var Text_1 = require("../Text");
var TextField_1 = require("../TextField");
function Paginator(props) {
    var page = props.page, total = props.total, onChange = props.onChange;
    var locale = i18n_1.useLocale();
    var _a = react_1.useState("" + (page + 1)), inputValue = _a[0], setInputValue = _a[1];
    react_1.useEffect(function () {
        setInputValue("" + (page + 1));
    }, [page]);
    var classes = styles_1.useStyles(exports.createStyles).classes;
    var handleInputChange = function (e) {
        setInputValue(e.target.value.replace(/[^\d]/g, ''));
    };
    var handleInputKeyPress = function (e) {
        if (e.key === 'Enter') {
            applyInputValue();
        }
    };
    var handleInputBlur = function (e) {
        applyInputValue();
    };
    var applyInputValue = function () {
        var inputNumber = parseInt(inputValue, 10);
        if (!isNaN(inputNumber) && inputNumber !== currentPage() && inputNumber >= 1 && inputNumber <= total) {
            onChange && onChange(inputNumber - 1);
        }
        else {
            setInputValue("" + (page + 1));
        }
    };
    var currentPage = function () { return page + 1; };
    var isLastPage = function () { return currentPage() >= total; };
    var isFirstPage = function () { return currentPage() <= 1; };
    var go = function (newPage) { return onChange && onChange(newPage - 1); };
    var previous = function () { return go(currentPage() - 1); };
    var next = function () { return go(currentPage() + 1); };
    return (react_1.default.createElement("div", { className: classes.paginator },
        react_1.default.createElement(Button_1.Button, { style: classes.leftButton, size: 'small', skin: 'ghost', disabled: isFirstPage(), title: locale.paginator.previousPage, onClick: !isFirstPage() ? previous : undefined },
            react_1.default.createElement(Icon_1.Icon, { icon: 'angleLeft' })),
        react_1.default.createElement(TextField_1.TextInput, { style: classes.input, value: inputValue, onChange: handleInputChange, onBlur: handleInputBlur, onKeyDown: handleInputKeyPress, clearable: false, maxLength: 4, title: locale.paginator.currentPage }),
        react_1.default.createElement(Text_1.Text, null,
            locale.paginator.of,
            " ",
            total),
        react_1.default.createElement(Button_1.Button, { style: classes.rightButton, size: 'small', skin: 'ghost', disabled: isLastPage(), title: locale.paginator.nextPage, onClick: !isLastPage() ? next : undefined },
            react_1.default.createElement(Icon_1.Icon, { icon: 'angleRight' }))));
}
exports.Paginator = Paginator;
Paginator.defaultProps = {
    onChange: function (page) { return null; },
};
exports.createStyles = function (theme) { return ({
    paginator: {
        display: 'inline-flex',
        alignItems: 'center',
        margin: 0,
    },
    disabled: {
        color: theme.pallete.text.disabled,
        cursor: 'not-allowed',
        '&:hover': {
            background: 'transparent',
        },
    },
    input: {
        width: Number(40 + 4 * 7),
        textAlign: 'center',
        margin: '0 0.5rem 0 0.25rem',
    },
    leftButton: {},
    rightButton: {
        marginLeft: '0.25rem',
    },
}); };
//# sourceMappingURL=Paginator.js.map