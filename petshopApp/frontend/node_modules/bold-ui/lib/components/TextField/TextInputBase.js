"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStyles = exports.createStyleParts = exports.TextInputBase = void 0;
var react_1 = __importDefault(require("react"));
var styles_1 = require("../../styles");
var Input_1 = require("../Input/Input");
/**
 * Primitive of input of text (and derivative) types.
 * Provides only the stylization of the <input /> component.
 */
function TextInputBase(props) {
    var invalid = props.invalid, style = props.style, rest = __rest(props, ["invalid", "style"]);
    var _a = styles_1.useStyles(exports.createStyles), classes = _a.classes, css = _a.css;
    var className = css(classes.input, invalid && classes.invalid, style);
    return react_1.default.createElement(Input_1.Input, __assign({ className: className, "aria-invalid": invalid ? 'true' : undefined }, rest));
}
exports.TextInputBase = TextInputBase;
TextInputBase.defaultProps = {
    type: 'text',
};
exports.createStyleParts = function (theme) { return ({
    base: {
        backgroundColor: theme.pallete.surface.main,
        border: 'solid 1px ' + theme.pallete.gray.c60,
        borderRadius: theme.radius.input,
        color: theme.pallete.text.main,
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.typography.sizes.text,
        lineHeight: '1rem',
        margin: 0,
        padding: 'calc(0.5rem - 1px) 0.5rem',
        width: '100%',
        transitionProperty: 'box-shadow',
        transitionDuration: '.2s',
        // Remove input type="search" decorations
        '&[type="search"]::-webkit-search-decoration': { display: 'none' },
        '&[type="search"]::-webkit-search-cancel-button': { display: 'none' },
        '&[type="search"]::-webkit-search-results-button': { display: 'none' },
        '&[type="search"]::-webkit-search-results-decoration': { display: 'none' },
        '&:required': {
            boxShadow: 'none',
        },
    },
    placeholder: {
        color: theme.pallete.text.secondary,
    },
    disabled: {
        borderColor: theme.pallete.gray.c80,
        backgroundColor: theme.pallete.surface.background,
    },
    hover: {
        borderColor: theme.pallete.gray.c50,
    },
    active: {
        borderColor: theme.pallete.primary.main,
        boxShadow: '0 2px 4px 0 rgba(0, 0, 0, 0.09)',
    },
    focus: {
        outline: 'none',
        boxShadow: styles_1.focusBoxShadow(theme),
    },
    invalid: {
        border: 'solid 1px ' + theme.pallete.status.danger.main,
        ':not(:disabled):focus': {
            border: 'solid 1px ' + theme.pallete.gray.c80,
            boxShadow: styles_1.focusBoxShadow(theme, 'danger'),
        },
    },
}); };
exports.createStyles = function (theme) {
    var parts = exports.createStyleParts(theme);
    return {
        input: __assign(__assign({}, parts.base), { '::placeholder': parts.placeholder, ':disabled': parts.disabled, ':not(:disabled):hover': parts.hover, ':not(:disabled):focus': parts.focus, ':not(:disabled):active': parts.active }),
        invalid: parts.invalid,
    };
};
//# sourceMappingURL=TextInputBase.js.map