"use strict";
// From downshift examples
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiDownshift = void 0;
var downshift_1 = __importDefault(require("downshift"));
var react_1 = __importStar(require("react"));
var util_1 = require("../../../util");
var SelectDownshift_1 = require("../SelectSingle/SelectDownshift");
function MultiDownshift(props) {
    var downshiftRef = react_1.useRef();
    var _a = react_1.useState(props.selectedItems), selectedItems = _a[0], setSelectedItems = _a[1];
    var _b = react_1.useState(false), changed = _b[0], setChanged = _b[1];
    react_1.useEffect(function () {
        setSelectedItems(props.selectedItems);
    }, [props.selectedItems]);
    react_1.useEffect(function () {
        if (downshiftRef.current && changed) {
            props.onChange && props.onChange(selectedItems, getStateAndHelpers(downshiftRef.current));
            props.onSelect && props.onSelect(selectedItems, getStateAndHelpers(downshiftRef.current));
            setChanged(false);
        }
    }, [selectedItems]);
    var isSelected = function (item) { return util_1.some(selectedItems, function (i) { return props.itemIsEqual(i, item); }); };
    var handleChange = function (selectedItem) {
        if (selectedItem) {
            if (isSelected(selectedItem)) {
                removeItem(selectedItem);
            }
            else {
                addItem(selectedItem);
            }
        }
    };
    var removeItem = function (selectedItem) {
        setChanged(true);
        setSelectedItems(function (currentItems) { return currentItems.filter(function (item) { return !props.itemIsEqual(selectedItem, item); }); });
    };
    var addItem = function (item) {
        setChanged(true);
        if (!isSelected(item)) {
            setSelectedItems(function (currentItems) { return __spreadArrays(currentItems, [item]); });
        }
    };
    var getStateAndHelpers = function (downshift) {
        downshiftRef.current = downshift;
        return __assign(__assign({}, downshift), { selectedItems: selectedItems,
            isSelected: isSelected,
            addItem: addItem,
            removeItem: removeItem });
    };
    var children = props.children, onSelect = props.onSelect, rest = __rest(props
    // TODO: compose together props (rather than overwriting them) like downshift does
    , ["children", "onSelect"]);
    // TODO: compose together props (rather than overwriting them) like downshift does
    return (react_1.default.createElement(SelectDownshift_1.SelectDownshift, __assign({}, rest, { stateReducer: stateReducer, onChange: handleChange, selectedItem: null, keepFilterAfterSelect: true }), function (downshift) { return children(getStateAndHelpers(downshift)); }));
}
exports.MultiDownshift = MultiDownshift;
MultiDownshift.defaultProps = {
    selectedItems: [],
    itemIsEqual: function (a, b) {
        if (process.env.NODE_ENV !== 'production') {
            console.warn('MultiDownshift: using a deep compare itemIsEqual implementation for object comparision.' +
                ' You should probably provide your own `itemIsEqual` implementation.');
        }
        return util_1.isEqual(a, b);
    },
};
var stateReducer = function (state, changes) {
    var inputValue = changes.inputValue, rest = __rest(changes, ["inputValue"]);
    if (changes.type === undefined && state.isOpen && !changes.isOpen) {
        // Clear inputValue when select is closed
        return __assign(__assign({}, changes), { inputValue: '' });
    }
    switch (changes.type) {
        case downshift_1.default.stateChangeTypes.changeInput:
            return __assign(__assign({}, rest), { inputValue: inputValue });
        case downshift_1.default.stateChangeTypes.keyDownEnter:
        case downshift_1.default.stateChangeTypes.clickItem:
            return __assign(__assign({}, rest), { highlightedIndex: state.highlightedIndex, isOpen: true });
        default:
            return rest;
    }
};
//# sourceMappingURL=MultiDownshift.js.map