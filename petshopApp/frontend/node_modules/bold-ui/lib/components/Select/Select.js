"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Select = void 0;
var react_1 = __importDefault(require("react"));
var SelectMulti_1 = require("./SelectMulti/SelectMulti");
var SelectSingle_1 = require("./SelectSingle/SelectSingle");
function Select(props) {
    var multiple = props.multiple, onChange = props.onChange, value = props.value, itemIsEqual = props.itemIsEqual, style = props.style, rest = __rest(props, ["multiple", "onChange", "value", "itemIsEqual", "style"]);
    var checkedValue = value;
    if (multiple && value && !Array.isArray(value)) {
        if (process.env.NODE_ENV !== 'production') {
            console.warn("Trying to set an object as value for <Select multiple /> but it should be an array");
        }
        checkedValue = value ? [value] : [];
    }
    if (!multiple && value && Array.isArray(value)) {
        if (process.env.NODE_ENV !== 'production') {
            console.warn("Trying to set an array as value for <Select /> but it should be an object." +
                " Set the 'multiple' prop if it can have multiple values");
        }
        checkedValue = value[0];
    }
    if (props.multiple && props.createNewItem) {
        if (process.env.NODE_ENV !== 'production') {
            throw new Error("Select does not support props 'createNewItem' and 'multiple' together");
        }
    }
    if (multiple) {
        return react_1.default.createElement(SelectMulti_1.SelectMulti, __assign({}, rest, { value: checkedValue, onChange: onChange, itemIsEqual: itemIsEqual }));
    }
    else {
        return react_1.default.createElement(SelectSingle_1.SelectSingle, __assign({}, rest, { value: checkedValue, onChange: onChange, style: style }));
    }
}
exports.Select = Select;
//# sourceMappingURL=Select.js.map