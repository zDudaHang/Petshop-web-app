"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlledDateRangeCalendar = void 0;
var react_1 = __importDefault(require("react"));
var DateRangeCalendar_1 = require("./DateRangeCalendar");
function ControlledDateRangeCalendar(props) {
    var inputOnFocus = props.inputOnFocus, onChange = props.onChange, value = props.value, onDayClick = props.onDayClick, rest = __rest(props, ["inputOnFocus", "onChange", "value", "onDayClick"]);
    var controllDayClick = function (day) {
        onDayClick && onDayClick(day);
        if (inputOnFocus === 1) {
            if (day < (value === null || value === void 0 ? void 0 : value.startDate)) {
                onChange({ startDate: day, endDate: value === null || value === void 0 ? void 0 : value.endDate });
            }
            else if (day > (value === null || value === void 0 ? void 0 : value.endDate)) {
                onChange({ startDate: day, endDate: undefined });
            }
            else {
                onChange({ startDate: day, endDate: value === null || value === void 0 ? void 0 : value.endDate });
            }
            return;
        }
        if (inputOnFocus === 2) {
            if ((value === null || value === void 0 ? void 0 : value.endDate) && day < (value === null || value === void 0 ? void 0 : value.startDate)) {
                onChange({ startDate: day, endDate: undefined });
            }
            else {
                onChange({ startDate: value === null || value === void 0 ? void 0 : value.startDate, endDate: day });
            }
            return;
        }
    };
    return react_1.default.createElement(DateRangeCalendar_1.DateRangeCalendar, __assign({}, rest, { value: value, onDayClick: controllDayClick, inputOnFocus: inputOnFocus }));
}
exports.ControlledDateRangeCalendar = ControlledDateRangeCalendar;
ControlledDateRangeCalendar.defaultProps = {
    onChange: function () { return null; },
    onDayClick: function () { return null; },
};
//# sourceMappingURL=ControlledDateRangeCalendar.js.map