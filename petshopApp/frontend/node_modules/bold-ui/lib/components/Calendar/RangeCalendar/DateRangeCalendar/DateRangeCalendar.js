"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dayHoverStyle = exports.DateRangeCalendar = void 0;
var React = __importStar(require("react"));
var util_1 = require("../../util");
var GenericRangeCalendar_1 = require("../GenericRangeCalendar/GenericRangeCalendar");
function DateRangeCalendar(_a) {
    var value = _a.value, inputOnFocus = _a.inputOnFocus, maxDate = _a.maxDate, minDate = _a.minDate, rest = __rest(_a, ["value", "inputOnFocus", "maxDate", "minDate"]);
    var handleIsInTheRange = function (day) {
        var _a, _b;
        (_a = value === null || value === void 0 ? void 0 : value.startDate) === null || _a === void 0 ? void 0 : _a.setHours(0, 0, 0, 0);
        (_b = value === null || value === void 0 ? void 0 : value.endDate) === null || _b === void 0 ? void 0 : _b.setHours(0, 0, 0, 0);
        day === null || day === void 0 ? void 0 : day.setHours(0, 0, 0, 0);
        if (!(value === null || value === void 0 ? void 0 : value.startDate)) {
            if (value === null || value === void 0 ? void 0 : value.endDate) {
                return util_1.isSameDay(day, value === null || value === void 0 ? void 0 : value.endDate);
            }
            else {
                return false;
            }
        }
        if (!value.endDate) {
            return util_1.isSameDay(day, value === null || value === void 0 ? void 0 : value.startDate);
        }
        if (((value === null || value === void 0 ? void 0 : value.startDate) <= day && day <= (value === null || value === void 0 ? void 0 : value.endDate)) || ((value === null || value === void 0 ? void 0 : value.endDate) <= day && day <= (value === null || value === void 0 ? void 0 : value.startDate))) {
            return true;
        }
        return false;
    };
    var hoverControl = function (day, hoverDate) {
        if (!(value === null || value === void 0 ? void 0 : value.startDate) && !(value === null || value === void 0 ? void 0 : value.endDate)) {
            return util_1.isSameDay(day, hoverDate);
        }
        else if (inputOnFocus) {
            if (!(value === null || value === void 0 ? void 0 : value.startDate) && (value === null || value === void 0 ? void 0 : value.endDate)) {
                if (inputOnFocus === 1) {
                    return ((value === null || value === void 0 ? void 0 : value.endDate) < day && hoverDate >= day) || ((value === null || value === void 0 ? void 0 : value.endDate) > day && hoverDate <= day);
                }
                else {
                    return util_1.isSameDay(day, hoverDate);
                }
            }
            else if ((value === null || value === void 0 ? void 0 : value.startDate) && !(value === null || value === void 0 ? void 0 : value.endDate)) {
                if (inputOnFocus === 2) {
                    return ((value === null || value === void 0 ? void 0 : value.startDate) < day && hoverDate >= day) || ((value === null || value === void 0 ? void 0 : value.startDate) > day && hoverDate <= day);
                }
                else {
                    return util_1.isSameDay(day, hoverDate);
                }
            }
            else {
                if (inputOnFocus === 1) {
                    return ((value === null || value === void 0 ? void 0 : value.startDate) > day && hoverDate <= day) || ((value === null || value === void 0 ? void 0 : value.endDate) < day && util_1.isSameDay(day, hoverDate));
                }
                else if (inputOnFocus === 2) {
                    return ((value === null || value === void 0 ? void 0 : value.endDate) < day && hoverDate >= day) || ((value === null || value === void 0 ? void 0 : value.endDate) > day && util_1.isSameDay(day, hoverDate));
                }
            }
        }
    };
    var isInHoverRange = function (day, hoverDate) {
        return hoverDate && (!minDate || day >= minDate) && (!maxDate || day <= maxDate) && hoverControl(day, hoverDate);
    };
    return (React.createElement(GenericRangeCalendar_1.GenericRangeCalendar, __assign({}, rest, { startDate: value === null || value === void 0 ? void 0 : value.startDate, endDate: value === null || value === void 0 ? void 0 : value.endDate, isInTheRange: handleIsInTheRange, isInTheHoverRange: isInHoverRange })));
}
exports.DateRangeCalendar = DateRangeCalendar;
exports.dayHoverStyle = function (theme) { return ({ background: theme.pallete.surface.background }); };
//# sourceMappingURL=DateRangeCalendar.js.map