"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidDate = exports.isSameDay = exports.createMonthMatrix = exports.createWeekArray = exports.getLastDayOfMonth = exports.getFirstDayOfMonth = void 0;
/**
 * Calculate the first day of a month.
 *
 * @param target Target month.
 * @returns A new date which is the first day of the target month.
 */
exports.getFirstDayOfMonth = function (target) {
    var firstDayOfMonth = new Date(target);
    firstDayOfMonth.setDate(1);
    return firstDayOfMonth;
};
/**
 * Calculate the last day of a month.
 * @param target  Target month.
 * @returns A new date which is the last day of the target month.
 */
exports.getLastDayOfMonth = function (target) {
    return new Date(target.getFullYear(), target.getMonth() + 1, 0);
};
/**
 * Creates an ordered array of the week containing the target date
 *
 * @param target Target date of the week
 * @returns An array starting by sunday and finished by saturday which includes the target date
 */
exports.createWeekArray = function (target) {
    var week = [];
    for (var i = 0; i < 7; i++) {
        var d = new Date(target);
        d.setDate(target.getDate() - target.getDay() + i);
        week.push(d);
    }
    return week;
};
/**
 * Creates an array of weeks for the target month. Each week is itself an array of dates containing the week's dates.
 *
 * @param target The target month to create.
 * @returns A new array of array of dates containing all month dates.
 */
exports.createMonthMatrix = function (target) {
    var firstDayOfMonth = exports.getFirstDayOfMonth(target);
    var lastDayOfMonth = exports.getLastDayOfMonth(target);
    var weeks = [];
    var curr = firstDayOfMonth;
    while (true) {
        var week = exports.createWeekArray(curr);
        if (week[0] > lastDayOfMonth && !exports.isSameDay(week[0], lastDayOfMonth)) {
            break;
        }
        else {
            weeks.push(week);
            curr = new Date(curr);
            curr.setDate(curr.getDate() + 7);
        }
    }
    return weeks;
};
/**
 * Check if two dates belongs to the same day.
 *
 * @param d1 First date
 * @param d2 Second date
 * @returns Whether the dates are the same day, month and year
 */
exports.isSameDay = function (d1, d2) {
    return d1.getDate() === d2.getDate() && d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear();
};
/**
 * Check if the parameter is a valid date.
 */
exports.isValidDate = function (possibleDate) {
    // If possibleDate is not a valid date, getTime() will return NaN, and NaN is never equal to itself.
    // eslint-disable-next-line no-self-compare
    return possibleDate && possibleDate.getTime() === possibleDate.getTime();
};
//# sourceMappingURL=util.js.map