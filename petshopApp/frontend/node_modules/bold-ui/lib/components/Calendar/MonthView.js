"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStyles = exports.MonthView = void 0;
var react_1 = __importStar(require("react"));
var styles_1 = require("../../styles");
var locale_1 = require("../../util/locale");
var util_1 = require("./util");
function MonthView(props) {
    var visibleDate = props.visibleDate, renderDay = props.renderDay, renderWeekName = props.renderWeekName, createDayStyles = props.createDayStyles, onDayClick = props.onDayClick, onDayHover = props.onDayHover;
    var _a = styles_1.useStyles(exports.createStyles), classes = _a.classes, css = _a.css;
    var month = react_1.useMemo(function () { return util_1.createMonthMatrix(visibleDate); }, [visibleDate]);
    var handleDayClick = react_1.useCallback(function (day) { return function () { return onDayClick(day); }; }, [onDayClick]);
    var handleDayHover = react_1.useCallback(function (day) { return function () { return onDayHover(day); }; }, [onDayHover]);
    return (react_1.default.createElement("table", { className: classes.table },
        react_1.default.createElement("thead", null,
            react_1.default.createElement("tr", null, month[0].map(function (day, d) { return (react_1.default.createElement("th", { key: d }, renderWeekName(day))); }))),
        react_1.default.createElement("tbody", null, month.map(function (week, w) { return (react_1.default.createElement("tr", { key: w }, week.map(function (day, d) { return (react_1.default.createElement("td", { key: d, "data-date": day.toISOString().slice(0, 10) },
            react_1.default.createElement("span", { className: css(classes.day, createDayStyles(day, props)), onClick: handleDayClick(day), onMouseOver: handleDayHover(day), role: 'button', "aria-selected": props.isDaySelected && props.isDaySelected(day) }, renderDay(day)))); }))); }))));
}
exports.MonthView = MonthView;
MonthView.defaultProps = {
    onDayClick: function () { return null; },
    onDayHover: function () { return null; },
    renderDay: function (day) {
        var dayFormatter = new Intl.DateTimeFormat(locale_1.getUserLocale(), { day: '2-digit' });
        return dayFormatter.format(day);
    },
    renderWeekName: function (firstWeekDay) {
        var weekFormatter = new Intl.DateTimeFormat(locale_1.getUserLocale(), { weekday: 'narrow' });
        return weekFormatter.format(firstWeekDay);
    },
    createDayStyles: function () { return null; },
};
exports.createStyles = function (theme) { return ({
    table: {
        borderCollapse: 'collapse',
        textAlign: 'center',
        lineHeight: '1.5rem',
        width: '100%',
        th: {
            width: '2rem',
            padding: '0.25rem 0',
        },
    },
    day: {
        width: '2rem',
        padding: '0.25rem 0',
        display: 'inline-block',
        borderRadius: '50%',
        ':hover': {
            cursor: 'pointer',
            background: theme.pallete.surface.background,
        },
    },
    active: {
        background: theme.pallete.primary.main,
        color: theme.pallete.surface.main,
    },
}); };
//# sourceMappingURL=MonthView.js.map