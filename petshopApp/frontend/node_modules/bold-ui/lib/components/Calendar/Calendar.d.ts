import { Interpolation } from 'emotion';
import React, { MouseEvent } from 'react';
import { Theme } from '../../styles';
import { MonthViewProps } from './MonthView';
export interface CalendarProps extends MonthViewProps {
    /**
     * Map of modifier predicates to apply custom or pre-defined styles to dates.
     */
    modifiers?: Partial<DayModifierPredicateMap>;
    /**
     * Map of modifier styles to be applied to a date if the respective modifier predicate applies.
     */
    modifierStyles?: Partial<DayModifierStyleMap>;
    /**
     * Called when the current visible date changes.
     * You might want to change the current `visibleDate` prop when this occurs.
     * @param visibleDate The new visible date.
     */
    onVisibleDateChange(visibleDate: Date): void;
    /**
     *
     */
    onMouseLeave?(e: MouseEvent<HTMLDivElement>): void;
    /**
     *
     */
    isDaySelected?(day: Date): boolean;
}
export declare function Calendar(props: CalendarProps): JSX.Element;
export declare const createStyles: () => {
    root: React.CSSProperties;
    controls: React.CSSProperties;
};
export declare type ModifierFn = (day: Date, props: MonthViewProps) => boolean;
export interface DayModifierPredicateMap {
    disabled: ModifierFn;
    selected: ModifierFn;
    today: ModifierFn;
    adjacentMonth: ModifierFn;
    [key: string]: ModifierFn;
}
export declare type DayModifierStyleMap = {
    [key in keyof DayModifierPredicateMap]: (theme: Theme) => Interpolation;
};
export declare const defaultModifiers: DayModifierPredicateMap;
export declare const defaultModifierStyles: DayModifierStyleMap;
export declare const createDayStylesFn: (modifiers: DayModifierPredicateMap, styles: DayModifierStyleMap, theme: Theme) => (day: Date, props: MonthViewProps) => Interpolation;
