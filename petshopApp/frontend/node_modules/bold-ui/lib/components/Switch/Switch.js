"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInputStyles = exports.createStyles = exports.Switch = void 0;
var react_1 = __importDefault(require("react"));
var styles_1 = require("../../styles");
var Input_1 = require("../Input");
function Switch(props) {
    var label = props.label, name = props.name, disabled = props.disabled, onChange = props.onChange, value = props.value, defaultValue = props.defaultValue, checked = props.checked, defaultChecked = props.defaultChecked, rest = __rest(props, ["label", "name", "disabled", "onChange", "value", "defaultValue", "checked", "defaultChecked"]);
    var classes = styles_1.useStyles(exports.createStyles).classes;
    var inputClasses = styles_1.useStyles(exports.createInputStyles, classes).classes;
    return (react_1.default.createElement("label", __assign({ className: inputClasses.wrapper }, rest),
        react_1.default.createElement(Input_1.Input, { type: 'checkbox', className: inputClasses.input, name: name, value: value, defaultValue: defaultValue, checked: checked, defaultChecked: defaultChecked, disabled: disabled, onChange: onChange }),
        react_1.default.createElement("div", { className: classes.switch },
            react_1.default.createElement("span", { className: classes.knob })),
        label && react_1.default.createElement("span", { className: classes.text }, label)));
}
exports.Switch = Switch;
exports.createStyles = function (theme) { return ({
    switch: {
        outline: 0,
        background: theme.pallete.surface.background,
        borderRadius: '0.75rem',
        padding: 'calc(0.25rem - 1px) 0.25rem',
        display: 'inline-block',
        width: '3rem',
        lineHeight: 0,
        border: "1px solid " + theme.pallete.gray.c70,
        transition: 'all .2s',
    },
    knob: {
        background: theme.pallete.surface.main,
        borderRadius: '50%',
        display: 'inline-block',
        width: '1rem',
        height: '1rem',
        transition: 'all .2s',
        border: "1px solid " + theme.pallete.gray.c60,
        boxShadow: theme.shadows.outer['20'],
    },
    text: {
        marginLeft: '0.5rem',
    },
}); };
exports.createInputStyles = function (theme, classes) {
    var _a, _b;
    return ({
        wrapper: (_a = {
                display: 'inline-flex',
                alignItems: 'center',
                cursor: 'pointer',
                textAlign: 'left'
            },
            _a["&:hover ." + classes.switch] = {
                cursor: 'pointer',
                borderColor: theme.pallete.gray.c40,
            },
            _a),
        input: (_b = {
                opacity: 0,
                position: 'absolute',
                zIndex: -1
            },
            _b["&:checked + ." + classes.switch] = {
                background: theme.pallete.primary.main,
                borderColor: theme.pallete.primary.main,
                '&:hover': {
                    borderColor: theme.pallete.primary.main,
                },
            },
            _b["&:checked + ." + classes.switch + " > ." + classes.knob] = {
                transform: 'translateX(calc(1.5rem - 1px))',
            },
            _b["&:focus + ." + classes.switch] = {
                boxShadow: styles_1.focusBoxShadow(theme),
            },
            _b["&:disabled + ." + classes.switch] = {
                opacity: 0.4,
                cursor: 'not-allowed',
            },
            _b["&:disabled + ." + classes.switch + " + ." + classes.text] = {
                color: theme.pallete.gray.c70,
                cursor: 'not-allowed',
            },
            _b),
    });
};
//# sourceMappingURL=Switch.js.map