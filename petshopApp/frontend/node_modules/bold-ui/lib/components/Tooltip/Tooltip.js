"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tooltip = void 0;
var react_1 = __importStar(require("react"));
var react_popper_1 = require("react-popper");
var useTransition_1 = require("../../hooks/useTransition");
var styles_1 = require("../../styles");
var string_1 = require("../../util/string");
var Portal_1 = require("../Portal");
var RootRef_1 = require("../RootRef");
var TooltipPopper_1 = require("./TooltipPopper");
function Tooltip(props) {
    var text = props.text, offset = props.offset, children = props.children, externalStyle = props.style, transitionDelay = props.transitionDelay, container = props.container, rest = __rest(props, ["text", "offset", "children", "style", "transitionDelay", "container"]);
    var child = react_1.default.Children.only(children);
    var _a = styles_1.useStyles(createStyles, props), css = _a.css, theme = _a.theme, classes = _a.classes;
    var _b = react_1.useState(false), visible = _b[0], setVisible = _b[1];
    var rootRef = react_1.useRef();
    var _c = react_1.useState(), popperRef = _c[0], setPopperRef = _c[1];
    var tooltipId = react_1.useMemo(function () { return "tooltip-" + string_1.randomStr(); }, []);
    var transitionState = useTransition_1.useTransition(visible, { exitTimeout: transitionDelay });
    var popperStyles = react_popper_1.usePopper(rootRef.current, popperRef, __assign({ modifiers: [
            {
                name: 'default',
                options: {
                    offset: { offset: "0, " + theme.typography.sizes.html * offset },
                    preventOverflow: {
                        boundariesElement: 'window',
                    },
                },
            },
        ] }, rest)).styles.popper;
    react_1.useEffect(function () {
        if (!rootRef || !visible) {
            return;
        }
        var handleWindowPointerOver = function (e) {
            var _a;
            // This is implemented using mouseover since mouseleave does not trigger
            // for disabled elements due to browser/react bugs (https://github.com/facebook/react/issues/4251)
            var target = e.target;
            if (!((_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.contains(target))) {
                setVisible(false);
            }
        };
        window.addEventListener('pointerover', handleWindowPointerOver);
        return function () { return window.removeEventListener('pointerover', handleWindowPointerOver); };
    }, [rootRef, visible]);
    var handlePointerEnter = react_1.useCallback(function (e) {
        setVisible(true);
        child.props.onPointerEnter && child.props.onPointerEnter(e);
    }, []);
    var handleFocus = react_1.useCallback(function (e) {
        setVisible(true);
        child.props.onFocus && child.props.onFocus(e);
    }, []);
    var handleBlur = react_1.useCallback(function (e) {
        setVisible(false);
        child.props.onBlur && child.props.onBlur(e);
    }, []);
    if (!text) {
        return child;
    }
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(RootRef_1.RootRef, { rootRef: rootRef }, react_1.default.cloneElement(child, {
            title: !visible ? child.props.title || text : child.props.title,
            'aria-describedby': visible ? tooltipId : undefined,
            onPointerEnter: handlePointerEnter,
            onFocus: handleFocus,
            onBlur: handleBlur,
        })),
        transitionState !== 'exited' && (react_1.default.createElement(Portal_1.Portal, { container: container },
            react_1.default.createElement("div", { id: tooltipId, ref: setPopperRef, className: css(classes.popper, transitionState === 'entered' && classes.visible), style: popperStyles, role: 'tooltip', "aria-hidden": !visible ? 'true' : 'false' },
                react_1.default.createElement(TooltipPopper_1.TooltipPopper, { text: text, style: externalStyle }))))));
}
exports.Tooltip = Tooltip;
Tooltip.defaultProps = {
    placement: 'top',
    offset: 0.25,
    transitionDelay: 200,
};
var createStyles = function (theme, _a) {
    var transitionDelay = _a.transitionDelay;
    return ({
        popper: {
            zIndex: theme.zIndex.tooltip,
            transition: "opacity " + transitionDelay + "ms ease",
            opacity: 0,
        },
        visible: {
            opacity: 1,
        },
    });
};
//# sourceMappingURL=Tooltip.js.map