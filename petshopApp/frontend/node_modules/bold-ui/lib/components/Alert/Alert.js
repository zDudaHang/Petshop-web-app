"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTypesStyles = exports.createStyles = exports.Alert = void 0;
var react_1 = __importDefault(require("react"));
var i18n_1 = require("../../i18n");
var styles_1 = require("../../styles");
var Button_1 = require("../Button");
var Icon_1 = require("../Icon/Icon");
var Tooltip_1 = require("../Tooltip");
function Alert(props) {
    var styles = props.styles, type = props.type, children = props.children, onCloseClick = props.onCloseClick, inline = props.inline, rest = __rest(props, ["styles", "type", "children", "onCloseClick", "inline"]);
    var _a = styles_1.useStyles(exports.createStyles, props), classes = _a.classes, css = _a.css, theme = _a.theme;
    var typeStyle = exports.createTypesStyles(theme)[type];
    var locale = i18n_1.useLocale();
    return (react_1.default.createElement("div", __assign({ className: css(classes.wrapper, typeStyle.style, styles && styles.wrapper), role: 'alert' }, rest),
        react_1.default.createElement("div", { className: css(classes.container, styles && styles.container) },
            react_1.default.createElement(Icon_1.Icon, { icon: typeStyle.icon, style: classes.icon, size: inline ? 1 : undefined }),
            react_1.default.createElement("div", { className: classes.content }, children),
            onCloseClick && (react_1.default.createElement("span", { className: classes.closeButtonWrapper },
                react_1.default.createElement(Tooltip_1.Tooltip, { text: locale.alert.close },
                    react_1.default.createElement(Button_1.Button, { "aria-label": locale.alert.close, size: 'small', skin: 'ghost', style: classes.closeButton, onClick: onCloseClick },
                        react_1.default.createElement(Icon_1.Icon, { icon: 'timesDefault' }))))))));
}
exports.Alert = Alert;
exports.createStyles = function (theme, _a) {
    var inline = _a.inline;
    return ({
        wrapper: {
            padding: inline ? '0.375rem 0.5rem' : '0 1rem',
            minHeight: inline ? '2rem' : '2.5rem',
            borderRadius: '2px',
            borderStyle: 'solid',
            borderWidth: '1px',
            display: inline ? 'inline-flex' : 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            lineHeight: '1.25rem',
        },
        container: {
            display: 'flex',
            alignItems: 'center',
            flex: 1,
        },
        icon: {
            marginRight: '0.5rem',
        },
        content: {
            flex: 1,
        },
        closeButtonWrapper: {
            marginLeft: 'auto',
            paddingLeft: '1rem',
            display: 'inline-flex',
            alignItems: 'center',
        },
        closeButton: {
            padding: inline && 0,
        },
    });
};
exports.createTypesStyles = function (theme) {
    return {
        info: {
            icon: 'infoCircleFilled',
            style: {
                background: theme.pallete.status.info.background,
                color: theme.pallete.status.info.main,
                borderColor: theme.pallete.status.info.main,
            },
        },
        success: {
            icon: 'checkCircleFilled',
            style: {
                background: theme.pallete.status.success.background,
                color: theme.pallete.status.success.main,
                borderColor: theme.pallete.status.success.main,
            },
        },
        warning: {
            icon: 'exclamationTriangleFilled',
            style: {
                background: theme.pallete.status.alert.background,
                color: theme.pallete.status.alert.main,
                borderColor: theme.pallete.status.alert.main,
            },
        },
        danger: {
            icon: 'banOutline',
            style: {
                background: theme.pallete.status.danger.background,
                color: theme.pallete.status.danger.main,
                borderColor: theme.pallete.status.danger.main,
            },
        },
    };
};
//# sourceMappingURL=Alert.js.map