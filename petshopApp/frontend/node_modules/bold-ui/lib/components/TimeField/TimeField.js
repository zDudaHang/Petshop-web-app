"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.padTime = exports.TimeField = void 0;
var react_1 = __importDefault(require("react"));
var react_text_mask_1 = require("react-text-mask");
var createAutoCorrectedDatePipe_1 = __importDefault(require("text-mask-addons/dist/createAutoCorrectedDatePipe"));
var MaskedTextField_1 = require("../MaskedTextField");
var mask = [/\d/, /\d/, ':', /\d/, /\d/];
function TimeField(props) {
    var onChange = props.onChange, onInputChange = props.onInputChange, rest = __rest(props, ["onChange", "onInputChange"]);
    var handleChange = function (e) {
        if (!e) {
            return onChange(null);
        }
        if (onChange) {
            var value = e.target.value;
            onChange(value);
        }
        if (onInputChange) {
            return onInputChange(e);
        }
    };
    var handleBlur = function (e) {
        if (onChange) {
            var value = e.target.value;
            if (value) {
                var paddedValue = exports.padTime(value);
                onChange(paddedValue);
            }
        }
        if (props.onBlur) {
            // Call original blur handler (if existent)
            return props.onBlur(e);
        }
    };
    return (react_1.default.createElement(MaskedTextField_1.MaskedTextField, __assign({ mask: mask, placeholder: 'hh:mm', pipe: createAutoCorrectedDatePipe_1.default('HH:MM') }, rest, { onChange: handleChange, onBlur: handleBlur })));
}
exports.TimeField = TimeField;
exports.padTime = function (value) {
    var numbersOnly = value.replace(/[^\d]/g, '');
    if (numbersOnly.length < 4) {
        var paddedValue = numbersOnly.padEnd(4, '0');
        var conformedValue = react_text_mask_1.conformToMask(paddedValue, mask, {});
        return conformedValue.conformedValue;
    }
    return value;
};
//# sourceMappingURL=TimeField.js.map