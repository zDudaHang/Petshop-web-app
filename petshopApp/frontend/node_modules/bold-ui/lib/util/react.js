"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setNativeValue = exports.composeHandlers = exports.setRef = exports.composeRefs = void 0;
/**
 * Compose multiple react refs.
 *
 * @returns A new ref that passes down the Element to all ref arguments.
 */
function composeRefs() {
    var refs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        refs[_i] = arguments[_i];
    }
    return function (value) { return refs.forEach(function (ref) { return setRef(ref, value); }); };
}
exports.composeRefs = composeRefs;
/**
 * Changes the value of a ref.
 * The ref can be a function ref or a object ref.
 *
 * @param ref The ref to have its value changed.
 * @param value The new value.
 */
function setRef(ref, value) {
    if (typeof ref === 'function') {
        ref(value);
    }
    else if (ref) {
        var mutableRef = ref;
        mutableRef.current = value;
    }
}
exports.setRef = setRef;
/**
 * Compose multiple event handlers.
 *
 * @returns A new function that triggers all handlers passed as parameters, in order.
 */
function composeHandlers() {
    var handlers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        handlers[_i] = arguments[_i];
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return handlers.forEach(function (handler) { return handler && handler.apply(void 0, args); });
    };
}
exports.composeHandlers = composeHandlers;
/**
 * Invokes the native `value` property setter of an element.
 * From https://github.com/facebook/react/issues/10135#issuecomment-401496776
 *
 * @param element The element to invoke the setter on.
 * @param value The value to be set.
 */
function setNativeValue(element, value) {
    var prototype = Object.getPrototypeOf(element);
    var _a = (Object.getOwnPropertyDescriptor(prototype, 'value') || {}).set, prototypeValueSetter = _a === void 0 ? null : _a;
    var _b = (Object.getOwnPropertyDescriptor(element, 'value') || {}).set, valueSetter = _b === void 0 ? null : _b;
    if (prototypeValueSetter && valueSetter !== prototypeValueSetter) {
        prototypeValueSetter.call(element, value);
    }
    else if (valueSetter) {
        valueSetter.call(element, value);
    }
    else {
        throw new Error('The given element does not have a value setter');
    }
}
exports.setNativeValue = setNativeValue;
//# sourceMappingURL=react.js.map