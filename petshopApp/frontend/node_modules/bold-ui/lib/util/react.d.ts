import { Ref } from 'react';
/**
 * Compose multiple react refs.
 *
 * @returns A new ref that passes down the Element to all ref arguments.
 */
export declare function composeRefs<T>(...refs: Array<Ref<T>>): (value: T) => void;
/**
 * Changes the value of a ref.
 * The ref can be a function ref or a object ref.
 *
 * @param ref The ref to have its value changed.
 * @param value The new value.
 */
export declare function setRef<T>(ref: Ref<T>, value: any): void;
/**
 * Compose multiple event handlers.
 *
 * @returns A new function that triggers all handlers passed as parameters, in order.
 */
export declare function composeHandlers(...handlers: Array<(...params: any) => void>): (...args: any[]) => void;
/**
 * Invokes the native `value` property setter of an element.
 * From https://github.com/facebook/react/issues/10135#issuecomment-401496776
 *
 * @param element The element to invoke the setter on.
 * @param value The value to be set.
 */
export declare function setNativeValue(element: HTMLElement, value: any): void;
