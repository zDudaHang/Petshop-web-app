export * from './Observable';
export * from './types';
export declare const debounce: <T extends (...args: any) => any>(func: T, wait?: number, options?: import("lodash").DebounceSettings) => T & import("lodash").Cancelable;
export declare const isEmpty: (value?: any) => boolean;
export declare const isEqual: (value: any, other: any) => boolean;
export declare const merge: {
    <TObject, TSource>(object: TObject, source: TSource): TObject & TSource;
    <TObject_1, TSource1, TSource2>(object: TObject_1, source1: TSource1, source2: TSource2): TObject_1 & TSource1 & TSource2;
    <TObject_2, TSource1_1, TSource2_1, TSource3>(object: TObject_2, source1: TSource1_1, source2: TSource2_1, source3: TSource3): TObject_2 & TSource1_1 & TSource2_1 & TSource3;
    <TObject_3, TSource1_2, TSource2_2, TSource3_1, TSource4>(object: TObject_3, source1: TSource1_2, source2: TSource2_2, source3: TSource3_1, source4: TSource4): TObject_3 & TSource1_2 & TSource2_2 & TSource3_1 & TSource4;
    (object: any, ...otherArgs: any[]): any;
};
export declare const some: {
    <T>(collection: import("lodash").List<T>, predicate?: import("lodash").ListIterateeCustom<T, boolean>): boolean;
    <T_1 extends object>(collection: T_1, predicate?: import("lodash").ObjectIterateeCustom<T_1, boolean>): boolean;
};
/**
 * Check whether the object is a promise.
 */
export declare const isPromise: (obj: any) => obj is Promise<any>;
