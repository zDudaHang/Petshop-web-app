"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.abbrev = exports.format = void 0;
var locale_1 = require("./locale");
/**
 * Formats a numeric value to its number format representation and current locale, using Intl.NumberFormat.
 *
 * @param value Value to be formatted
 * @param options Number format options
 * @return The formatted value.
 */
function format(value, options) {
    return new Intl.NumberFormat(locale_1.getUserLocale(), __assign({ style: 'decimal' }, options)).format(value);
}
exports.format = format;
/**
 * Abrreviates a number to its compact representation.
 * Example: 1000000 is abbreviated to '1m'
 *
 * @param value Value to be abbreviated.
 * @param options?: Intl.NumberFormatOptions
 * @return The abbreviated value.
 */
function abbrev(value, options) {
    if (!value) {
        return value;
    }
    if (value >= 1e12) {
        return format(value / 1e12, __assign({ minimumFractionDigits: 0, maximumFractionDigits: 1 }, options)) + 't';
    }
    if (value >= 1e9) {
        return format(value / 1e9, __assign({ minimumFractionDigits: 0, maximumFractionDigits: 1 }, options)) + 'b';
    }
    if (value >= 1e6) {
        return format(value / 1e6, __assign({ minimumFractionDigits: 0, maximumFractionDigits: 1 }, options)) + 'm';
    }
    if (value >= 1e3) {
        return format(value / 1e3, __assign({ minimumFractionDigits: 0, maximumFractionDigits: 1 }, options)) + 'k';
    }
    return format(value, __assign({ minimumFractionDigits: 0, maximumFractionDigits: 1 }, options));
}
exports.abbrev = abbrev;
//# sourceMappingURL=number.js.map