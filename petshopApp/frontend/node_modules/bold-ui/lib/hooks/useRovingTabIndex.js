"use strict";
// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useRovingTabIndex = void 0;
var react_1 = require("react");
var util_1 = require("../util");
var defaultOptions = {
    initialIndex: 0,
    nextKeys: ['ArrowDown', 'ArrowRight'],
    prevKeys: ['ArrowUp', 'ArrowLeft'],
    firstKeys: ['Home'],
    lastKeys: ['End'],
    wrapAround: false,
};
function useRovingTabIndex(options) {
    var _a = util_1.merge({}, defaultOptions, options), initialIndex = _a.initialIndex, nextKeys = _a.nextKeys, prevKeys = _a.prevKeys, firstKeys = _a.firstKeys, lastKeys = _a.lastKeys, getItems = _a.getItems, wrapAround = _a.wrapAround;
    var rootRef = react_1.useRef();
    // Initialize tabindex attributes:
    react_1.useEffect(function () {
        var items = getItems(rootRef.current);
        items.forEach(function (item, idx) {
            if (idx === initialIndex) {
                item.setAttribute('tabindex', '0');
            }
            else {
                item.setAttribute('tabindex', '-1');
            }
        });
    }, [initialIndex]);
    // Manage child items focus event:
    react_1.useEffect(function () {
        var items = getItems(rootRef.current);
        var handleChildFocus = function (event) {
            items.forEach(function (item) { return item.setAttribute('tabindex', '-1'); });
            var target = event.currentTarget;
            target.setAttribute('tabindex', '0');
        };
        items.forEach(function (item) { return item.addEventListener('focus', handleChildFocus); });
        return function () { return items.forEach(function (item) { return item.removeEventListener('focus', handleChildFocus); }); };
    }, [options]);
    // Manage keydown event on root ref:
    react_1.useEffect(function () {
        var getTargetIndex = function (items, key) {
            var activeElement = document.activeElement;
            var activeIndex = items.indexOf(activeElement);
            if (nextKeys.includes(key)) {
                return activeIndex < items.length - 1 ? activeIndex + 1 : wrapAround ? 0 : null;
            }
            if (prevKeys.includes(key)) {
                return activeIndex > 0 ? activeIndex - 1 : wrapAround ? items.length - 1 : null;
            }
            if (firstKeys.includes(key)) {
                return 0;
            }
            if (lastKeys.includes(key)) {
                return items.length - 1;
            }
            return null;
        };
        var handleKeyDown = function (event) {
            if (__spreadArrays(nextKeys, prevKeys, firstKeys, lastKeys).includes(event.key)) {
                var items = getItems(rootRef.current);
                var targetIndex = getTargetIndex(items, event.key);
                var target = items[targetIndex];
                if (target) {
                    target.focus();
                }
                event.preventDefault();
            }
        };
        rootRef.current.addEventListener('keydown', handleKeyDown);
        return function () { return rootRef.current.removeEventListener('keydown', handleKeyDown); };
    }, [options]);
    return rootRef;
}
exports.useRovingTabIndex = useRovingTabIndex;
//# sourceMappingURL=useRovingTabIndex.js.map