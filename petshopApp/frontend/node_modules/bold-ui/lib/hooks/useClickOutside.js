"use strict";
// From https://github.com/sandiiarov/use-events/blob/master/src/useClickOutside/index.tsx
Object.defineProperty(exports, "__esModule", { value: true });
exports.useClickOutside = void 0;
var react_1 = require("react");
/**
 * Trigger a callback whenever a click is made outside the ref elements.
 *
 * @param ref The target element(s) to ignore.
 * @param onClickOutside The callback function to be called.
 */
exports.useClickOutside = function (ref, onClickOutside) {
    var _a = react_1.useState(false), isActive = _a[0], setActive = _a[1];
    react_1.useEffect(function () {
        var mousedown = function (e) {
            var target = e.target;
            var refs = getRefs(ref);
            if (refs.filter(function (r) { return !!r; }).every(function (r) { return !r.contains(target); })) {
                setActive(true);
                onClickOutside(e);
            }
        };
        var mouseup = function (e) {
            var target = e.target;
            var refs = getRefs(ref);
            if (refs.filter(function (r) { return !!r; }).every(function (r) { return !r.contains(target); })) {
                setActive(false);
            }
        };
        document.addEventListener('mousedown', mousedown);
        document.addEventListener('mouseup', mouseup);
        return function () {
            document.removeEventListener('mousedown', mousedown);
            document.removeEventListener('mouseup', mouseup);
        };
    }, [ref, onClickOutside]);
    return [isActive];
};
function getRefs(ref) {
    if (Array.isArray(ref)) {
        return ref.map(function (item) {
            if (isRef(item))
                return item.current;
            return item;
        });
    }
    else if (isRef(ref)) {
        return [ref.current];
    }
    else {
        return [ref];
    }
}
function isRef(ref) {
    return !!(ref === null || ref === void 0 ? void 0 : ref.current);
}
//# sourceMappingURL=useClickOutside.js.map