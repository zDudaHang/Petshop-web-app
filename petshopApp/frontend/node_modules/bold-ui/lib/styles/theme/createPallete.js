"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.textColorMap = exports.createPallete = exports.defaultConfig = void 0;
var util_1 = require("../../util");
var colors_1 = require("../colors");
exports.defaultConfig = {
    grayScale: colors_1.gray,
    primaryScale: colors_1.blue,
    successScale: colors_1.green,
    dangerScale: colors_1.red,
    alertScale: colors_1.orange,
    infoScale: colors_1.blue,
    highlightScale: colors_1.yellow,
};
exports.createPallete = function (userConfig) {
    var config = util_1.merge({}, exports.defaultConfig, userConfig);
    return {
        gray: config.grayScale,
        divider: config.grayScale.c80,
        highlight: config.highlightScale.c80,
        primary: __assign(__assign({}, config.primaryScale), { main: config.primaryScale.c40 }),
        text: {
            main: config.grayScale.c10,
            secondary: config.grayScale.c40,
            disabled: config.grayScale.c70,
        },
        surface: {
            main: config.grayScale.c100,
            background: config.grayScale.c90,
        },
        status: {
            danger: __assign(__assign({}, config.dangerScale), { main: config.dangerScale.c40, background: config.dangerScale.c90, onColor: config.dangerScale.c100 }),
            success: __assign(__assign({}, config.successScale), { main: config.successScale.c40, background: config.successScale.c90, onColor: config.successScale.c100 }),
            info: __assign(__assign({}, config.infoScale), { main: config.infoScale.c40, background: config.infoScale.c90, onColor: config.infoScale.c100 }),
            alert: __assign(__assign({}, config.alertScale), { main: config.alertScale.c40, background: config.alertScale.c90, onColor: config.alertScale.c100 }),
        },
    };
};
exports.textColorMap = {
    inherit: function (pallete) { return 'inherit'; },
    normal: function (pallete) { return pallete.text.main; },
    primary: function (pallete) { return pallete.primary.main; },
    danger: function (pallete) { return pallete.status.danger.main; },
    success: function (pallete) { return pallete.status.success.main; },
    info: function (pallete) { return pallete.status.info.main; },
    alert: function (pallete) { return pallete.status.alert.main; },
    secondary: function (pallete) { return pallete.text.secondary; },
    disabled: function (pallete) { return pallete.text.disabled; },
};
//# sourceMappingURL=createPallete.js.map